%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Greek
%%Title: tree circuit with wind.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Administrator
%%CreationDate: 2/23/2013
%%BoundingBox: 0 0 773 637
%%HiResBoundingBox: 0 0 772.0586 636.1407
%%CropBox: 0 0 772.0586 636.1407
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.351735, 2008/07/22-18:11:12        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2013-02-23T12:25:50+02:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>212</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA1AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9N0xVumKupiruOKu44q3&#xA;xxV3DFW+GKt+nirXp4q7hirXDFXcMVdxxVrjiruOKupirqYq1TFXUxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxVtcVXUxVumKupirfHFW+OKtgYquC4qh9U1Cw0rTbrU9QmW3sLKJ7i6nevFI41LOxpU7A&#xA;dsVSzyZ508s+dNEXWvLl4L3TzI8Jk4PGyyR05IySBWB3B6dDiqe+niq0pQVOw7nFWimKtccVa44q&#xA;1xxVqmKtUxVxGKtUxVqmKuxV2KuxV2KuxV2KuxV1MVdTFWsVdiq5cVXgYq3TFW6Yq3irYXFV4XFV&#xA;k9xFAql61Y8UVQWZjQmigbnYE4qp3dpp+q6bNaXUcd3p99C0U0TgNHLDKtGUjoVZTirGfyl0DR9D&#xA;8g6XZ6TaJaW7oZnRK/FI5PJ2Y1ZmNAKk9NsVZDqIuDPZrFIYxJIyGhIoeBfl/lUEZXidvir2xVfq&#xA;4P6LuWFOUcZkWoqpaP4wGG1VJXcdxiqvbwJBCkSksqCgLGp/z9hsO2KulkgjZFdwrSGiAnqcVbKY&#xA;qsIxVqmKtEYqtIxVqmKuxVrFXYq7FXYq6mKupirqYq1irsVaOKuxVcuKqi4quxVwGKrgMVXAYqux&#xA;VZNDFMhjlQOh6qdxtiqhG31SSK2aphlPC3bqVIUtwb24qaH6Dv1VY75Qed/Jej2ts3C4mt+YY1AE&#xA;cbjmKjccg3HbcVqOmKp68UkTadHI5dxO1WJJ6wymlTuadKnfFWK+TtG836X5a19fM+vnX557m+kt&#xA;JTCsXpQBnVUov+rXj0X7I2xVm00yRIXc0A2AG5JPQAdycVQv6PW4mW6ugfUA4pEGPEJUNxcA0c8l&#xA;B9ug71VRUk8MbIsjhWkNEBPU4qhdW1bSdJtDe6peQ2NoHSM3FxIsUYeRgiAsxA3Y0xVElcVW4qtO&#xA;KraYq7FXYq1irqYq6mKupirWKuxVxxVrFWjirsVbXFVVcVXjFWwMVXAYq6RWaNlRuDEEK4AJBI2N&#xA;DttiqF0ozG2YysSRLIgBYvQRuUPxN8RqVLb9K06DFV+oXv1SJZPTMgLcetANiRv4t9lfFiB3xVbd&#xA;ms+nmlKznY9f7iXFUg8if8cHQP8AmBm/5ORYqn9z+8vLRE+JoZDLLT9lTE6CvzZtsVQr/wDHBv8A&#xA;/o9/5OSYqir0f6TYf8Z2/wCTEuKpDF+YmjyedG8p/VbtLoPJAl8yRi1e4it47uSFTz9XksMytyMY&#xA;TsGrtirIL3Tre7C+pyVlpR0YqdmDAHsRyUGh2PfaoxVj/nbyv5f82aKmi+ZrGO8gS6tpxE3JVYrM&#xA;q+pGykMKq5VhWoDU6EEqslighghjhgjWKGJQkUSAKqqooqqo2AA6DFXEYqsOKtUxVrFXYq1TFXYq&#xA;7FXYq0cVaxVxxVrFWjirsVbXFVVcVXjFV4GKoQ3F0NTW3Kj0nVnU+KKBVq/zc2A406b17YqiRcW5&#xA;uGthKhuERZHhDDmEckKxXrQlGAPscVSHV/N/lvynoEmr+Yr+PTtOW7li9eQMaySXDhVVUDMx77Dp&#xA;U9AcVTS8nguNPguLeRZoJpbWSKWMhkdGmjKsrCoIINQRiqpe/wC9Nh/xnb/kxLirGfJbzDQfL6Qr&#xA;8b2M3xkfCoEkVSf4DvirKf3NpDU1JJ3PV3c/rJ/z2xVCTQyrpc1psbq7E/pxjsZmZtz4Jz+I/wBg&#xA;xVL/ADreatb2+mR6R6SX95fJaxXE9Wjh9WGUNMUH94UWpCVHI7EjFVbQPJfl3RJPrdtaRy6u6kXe&#xA;tToj31wXPJ2muOIduTfsiijYKAoACrCvzZ8v/mFqPnDyTN5a8yPo+nfX2g1C0V5EEpWJ7os6oOMy&#xA;mK2deEm1aeJoq9E1aNHt4iwqUubZkPcEToKg/LbFVW8lk4ehAf8ASZB8H+SO7HwGKutopo7dUmbk&#xA;4rvUtQEkqvI0LcRtU7nriq44q1irWKtUxV2KuxVo4q7FWjirWKuOKtYq0cVdira4qqriqouKrxiq&#xA;Bu51i1O2NCztDOI4x1Y84thiqR6b+XGg2fnu/wDPZM7+YdSt0tZ/3rfV0jjVVAji26hFryruKgAk&#xA;4qmcmi6NrekS2GrWcOoWL3MzPb3CLJGWjuXZSVao+FlxVe9Ut5bcf3Vtd20cI7hOcLgfRzoPbFUu&#xA;87x3d02h6Xb3cliup6g1tc3MG06wrY3U7rE/+62cQ8OY3UElaNQhVNLTT7LTp7CxsYUt7O2tZYoI&#xA;IxRURWhAAGKq8oB1W2qK8YZyK9jyiFfuJxV2m/vbWK7fea5jSRz4BhUKv+StcVSXzdd266p5ZsuX&#xA;K7m1ISxwKCzmKGCX1JCqgkInNQzHYEgV3GKsimnhgTnKwRa0qcVSLzKQdZ8pEbg6rLQ/9uq+xVNN&#xA;T9R444IAGuGkjkVWqAFilV2ZqdqD78VVAI7SMu5Mksh3P7bv2AH6h2xVjXkfy/500q512bzLr/6Z&#xA;i1C8NxpVuIggtICtPT5ACvYcRt8PLqxxVk+KuxVrFWsVcRirWKuOKtYq0cVaxVxxVrFWjirsVbGK&#xA;qi4qqrirE9U/NbyXpfnzT/I15dOuv6kgeCMRs0Y58uCvINlZ+BoP64qyT4ZdWR0Ab6tFLFK+3wtK&#xA;YnCeO6rU/RiqMxVDyxSRyGeAVY/30OwEgApUV2DgdD36HsVVQN2eKevETLb3VzbM+1GjkWWOPcbG&#xA;nwAEdVPt9lVC+Zv+O15T/wC2rL/3Sr7FUzuZEi1CGVzREtrhmNCaANETsMVWRXKXGpQMoZSkM6ur&#xA;dQeUJ7VHQjocVePWvk3VX162/OmTVbhLe30pW07ysCQskJtPTgE0/IrGsrN6roIm4k9SRir1Xy55&#xA;cfT3n1LUpxfeYL4L9evuPFQq1KW9uhJ9OCOp4rWpNWYliTiqP1aNHto+VaieHiwJUjnKqNQihFVY&#xA;j5HFUo80Axap5SWCMVXVJFjT7KimlXwHToBiqcDSbBmaW4giuLiSnqzSRqWNOg3BoB2GKus4NJEr&#xA;PaQxJKg4l0jCtxbwNBVSV6jbb2xVFt0xVSOKuxVojFWsVccVaxVxxVrFWjirWKuOKtYq0cVdirYx&#xA;VeuKqqnfFWI6xo3l2T80/LmpXdnatqn6N1JLS7kRPW9SKW0KKjkcuSRyzEAdAW98VZDBNM95qENt&#xA;x9RZ19SVwWRP3ERAoCvJj4V2G57AqqsaasLtTLLG8G/LgnBePE7ULO3PlTflSnau+Ko3FUkTUNL1&#xA;drs6JfQXc1hdJDqUMMiuFmgdHaN6H4JQBTf5HsVVQXnC+ithoWtyK7abpWotcalMi1MEL2V1bGWR&#xA;ftcY5J19Sg+FasdgTiqeepHLqNpJGweN7eZkdSCrKWhIII6g4qletahpHl64j1G5YwQehKgt4l5N&#xA;NM8kKxpFEo5PK5+FVXc4qk97YXen/k7DYXkfpXdnpFtBcRVDcZIokR1qpINGHY4qzjFUu8wXtpY6&#xA;XJe3kyW9pbSQy3E8jBUREmQszMdgAMVY/YHU9f1a01y6iktLG0Z5dA0uQGOVjJG8LX14D8SVilZY&#xA;oTuoar/GQsarJv0XZP8AHcQx3Ex+3LIisx+8Gg8BiqlpEunSep9Si9NKLQjpwqwVR/JQhvg2413A&#xA;JxVJrn8zPJMHneLyNLqSr5mnj9VLLhIRQoZApkC+mrmMcgpatPmKqsjOKuxV2KrcVdirWKuOKtYq&#xA;0cVaxVxxVrFWjirsVcMVXqcVVFOKoXXNC0/XNONlehgAyy29xE3CaCZN45oZBukiHofoNQSMVS7y&#xA;Vc6tLb6nDq0kc97ZXz2r3UIKCdYoYgsrR9I3ZSOSgkV6bbYqhPzIm89xaZZ/4QR2uHuCt68KW0s6&#xA;xGKT0zGl3JBCQZ/TElWqErTxCqbeU9eTW9Ctb1iovAoi1K3AZGgu0AE8Lo/xoyPXZu1D0NcVQflD&#xA;yd5Y8t3WtnQtNh0/9IXvr3fogjm7RI3cmiguxCiiipoMVTi4HpXduybfWXMUy9mAidgaeI4AV8Po&#xA;oqxrRNKbQ/OR0mylpoUtjNd2mnsK/VZDPEskcDV2gb7Sx0+A14kLRQqjdat4JfOvlt5Y1d4YtQeF&#xA;mUEo5SJeSk9DxYio7HFUP5zvZLjylrQ9MiJYW4Sb0NHAG/RuQ+Ica7daYqnt61zOywWhHwNW4csU&#xA;AHE0UMoJ5cirU8OvXdVjvmiFLnzHo1pfH61a2lhqGqmzb4Ypbuyks1t5ZEH2hGZ3ZVOwajU5KpCr&#xA;LIIBECSecj7ySHqx/p4DFVHUiwtQFYrzlhRiNjxeVVYV91JGKpb5g1+PSFgsNOthea3f8hp2mIQg&#xA;bhQNNKwB9KCKo5yU8FUMxVSqk2kflh5dtdfTzXqkCan50IJn1pwy8WdQnGCHkyRIiDgmxbj1YksS&#xA;qy/FXYq7FVuKuxVrFXYq1irWKtYq44q1irRxV2KuGKrhiq8HFVQSoilnYKiirMTQADucVYdpur6V&#xA;qqz+bvIl3Fq9s8zQ6zY27DhdSQAIzRluIS6RAvFjRZE4hjTg6Kss0zU7HU7GK+sZfVt5a8WoVYMp&#xA;KsjqwDI6MCrKwBUih3xVj3mmxbSbxPNWluILz1ba31a3p+6vbaSZYR6gHSaESVikG/7Jqp2VZDZf&#xA;703/APxnX/kxFirr3/emw/4zt/yYlxVIdPvotU89XFxYq01jplnJYXN8KeibtpkdoI2rV2jCfvOI&#xA;4qfhryBAVVNchE3nDy+jEiMw3/NR+0KQ/CfbxxVS85pe6pNZ+U7RhbJq0U899fbForS0eBZFhQgg&#xA;yyNcIqlvhUVY1oFKqO1/X4NEgt7Oztze6velo9L0uNuLyuu7u7nl6cUfLlLK3T3YqrKpZZaTbaf9&#xA;bbVL+G680atDxv75yESKE1CxQozVjt4yT6aVq7VZiSWYKp7eSRanZ3FjZXJrPG8Ul1bSUaEOtOSu&#xA;hqsgrVaGvfFWGadpKfl/5Q0zyfpVzc+Ydbkm56bDeS1kcLOsskkrgN6NtDX4mptsAGdlUqsp8ueX&#xA;P0X697ez/X9dv+LajqJXjy414QwpVvSgi5ERxg+JJZ2ZiqmpNTXFXYq7FXYqtxV2KtYq7FWsVdiq&#xA;3FXYq1irjirWKuGKrhiq4YquGKpZo3lvSvL8EsHl2wtrGC4me5ubSIejE80u7S/ArUbYDpSgA7DF&#xA;UFfafrunajJrek2kTerRtW0yOYn60FFBLEGSNFuVUABiwDj4H6KyKojVwvmfypIdFnjdpzHLbtMH&#xA;VfUt5lkMUopzjblEY3qvJDWqkjjirtF19bzTtW1GGzuDcW0zrNppVRcCeG3j5wCpEbNyFFYNwbYh&#xA;qb4qgPJHmy/81+XdF1y+0a40K4ubiSthdEF6LFKA6/Zbi43HJVPtShKqO/L1ETyXpCooVRACFUUG&#xA;7EnpiqUa/wCatMg81290OUtnoUVxBqNxGOY+uXfpC3soVFWmuZONfTQErUVpyFVU18vaVq1xqLeY&#xA;9e/c6jLC1vY6YjBo7K1kZHaNmX4ZZ5GiQyv9kcQqbAs6qE8oQJJJqerGtzrl7f39tJdS/F6VpZ30&#xA;9vbxKBx4RIkWyL9t+THcswVZVBAkKEAlmY8ndt2Zj+03+e3QbYqlPmPzH+i/QsrKD6/rt/yGnacG&#xA;48uNOc0z0b0oIuQMkhHgAGdlUqqGiaEdJE1zczfpHzJqYBvr8rwrwrxSNTz9K3h5Hgm/ieTsxZVM&#xA;7C1ltYPTlm9ZzQswUqvKgBIBZz8R+Jvi3O+Kog4q7FXYq7FWsVaxVo4q7FWjirsVaOKtYq1irjir&#xA;WKuGKrhiq4YquGKrsVVFfxxVIdT0y902+l1zQ4/Vklo2q6UpCrdqoC+rFUhUuUUUBNBIBwf9lkVQ&#xA;/kLUbTUY9bvbR/Ut5tUlKkgqwIhhBVkYBlZSKMrAEHY74qmWnVntdLEe6WyI8r9qmApxHifj3xVi&#xA;Oi3msXfl/QPLekyGykvLJ7m91YcS8FtHIEZbdTWs8hkAVmHFBVjUgKVUXYx/ldoOpGLTdHV9S0xv&#xA;TmvbHSrm+mjmZKuJby3gnYzMr1flJzPKrdcVR9/5uvL1VsPLdjdnUrioF3qFhe2lnaxj7U8rXEcH&#xA;qca/DEjcnP8AKvJ1VS3yrc6x9TaDyrBBd6JE8jtrmpSukmoXc0rS3NxEsMbK0TSMaPsrH7A4BSVU&#xA;8aT8wOJ42+k8qbVnuaV/5FYq7QvKVtZrLe6sY9U1694tqGoSRihK/ZhgVuXpQR1IjQHxZiXLMVU4&#xA;itrS35fV4I4edOfpqFrTpWg98VX4q0cVdirsVdirRxVrFXHFWsVccVaxVo4q1irjirRxVrFXDFVw&#xA;xVcMVXDFV2KuGKrwcVYv5bvIrDzJrei3kf1W8vrt9S0+tOF1btFEjvEw+08brSRPtLsfssDiqf6Q&#xA;qx6dBb8fTkt0WKWPYcWVQD08eo8cVeZ6Pb69eT+W9P0mb6ilxokwvdU+EyQwC5j5C3Q1rM/RWYcV&#xA;3bcgKVWV3V1FosVt5R8o20Z1Ux81V+Tw2cLseV5eNXm7O/IqpbnM9d6c3VVUvPI93qFl9S1XzNql&#xA;9ZSBRd2rLp8Mc6jcpIYLSKTg/wC0oejD4TUEgqqE3knWT570nzBB5lvIdH060ltZPLypEttKXpxY&#xA;8FRQB/qk/COJArirLi3hirRJOKtHFWsVaOKuxV2KuxVo4q1irsVaxV2KtHFXYqtxVxxVrFWsVcMV&#xA;XDFVwxVcMVXYq4YquGKpfr2gWOt2ItbkvFJE4ms7yE8J7edK8JoXoeLrX5EVVgVJBVSnSNX1Y3Fx&#xA;purRquuaWbQTXkIAt7y1u5mjjmVKlkLelJyjb7DjYspqVUp8if72aD/2w5v+oqLFU4/Lazhi8m6X&#xA;fmsuoava2+o6peSHlLcXVxCjySO3/Cqo2VQFUBQBirJzirWKtHFWsVccVaxVo4q7FXYq7FXYq1ir&#xA;WKuOKtYq44q1irRxVo4q1irWKuGKrhiq4YquGKt4q2MVXDFVwxVi0v8Aym2rf8wOhf8AdQvsVYx5&#xA;M1uG2EF/cRtHZaTpkVhyB5zXN3eSLPHDbwpyZzxUDehLHYUBOKs58m2F3p3lDQ9PvI/SvLPT7W3u&#xA;Yqq3GSKFUdeSkqaMOoNMVTg4q1irRxVrFXHFWsVdirWKuxV2KuxV2KtYq1irjirWKtHFWjirWKtY&#xA;q1irhiq4YquGKrhirYxVsYquGKrhirD7K7Go+Zda1K3jcaep03SormQcFmurC+uTdCIH4mWJpgnK&#xA;lCwalaVxViHkkA32hEitNWhI9v8AcBdjFXsGKuOKtYq0cVaxV2KtYq7FWjirsVdirsVdirsVaxVr&#xA;FWsVccVaxVbirRxVrFXDFVwxVcMVXDFW8VbGKrhiq4YqxbyWAYtxWl/r5Hsf0vIMVYV5I/3t0P8A&#xA;7asP/dAu8Vev4q7FWsVdiq3FXYq0cVdirsVapirsVdirsVdirsVaxVrFWsVaOKtHFWjiq04q4Yqu&#xA;GKrhiq4YquxVwxVcMVXDFWLeSv7o/wDMdr//AHWJMVYV5I/3u0P/ALasP/dAu8Vev4q7FWsVdirR&#xA;xVrFXYq1TFXYq7FXYq1TFXYq7FXYq7FWsVaOKtYqtOKtHFVpxVwxVeMVXDFWxiq7FXDFVwxVcMVY&#xA;f5RvYIW1C2lJjudLv9VN/bsCJY4r/UJLq2n40+KKSLcOu3UdVairFPJuizX1xeaDqEZtZ4q3FjqV&#xA;u4E9rfaY/wBRaSE0ZWV1YMpYDkrNG6UryVej+UtTutV8q6Nqd3x+tX9jbXNx6YKp6k0Ku/FSWoKt&#xA;sK4qmuKtHFXYq7FWsVaxV2KuxV1MVapirsVdirVMVdirsVdirWKtHFVpxVacVWnFWxiq4YqvGKtj&#xA;FW8VbAxVcMVbGKsWuB/ztXmbx/QWn/8AJ7UsVSryj/ym15/29f8AuoR4qnP5b3cEvkrSLQEreaXa&#xA;QafqVq44ywXVtCiSxSKdwQRUdmUhhVSDirJsVdirWKuxV2KuxVqmKupirqYq1irsVS6+8x+XbCc2&#xA;99qlpaXAAYwzzxRvQ9Dxdgd8VQ/+M/J//V90/wD6S4P+a8Va/wAZ+T/+r7p//SVB/wA14q7/ABl5&#xA;P/6vun/9JcH/ADXiqJ0/XtD1GVotP1G1vJUXk8dvNHKwWtKkIxNKnFUfirRGKrSMVWnFVhxVtcVX&#xA;gYqvAxVumKrgMVbAxVumKtgYqxOaaJ/NvmmNHVni0PThIoIJUmXUWAbw2NcVSux0jVfVvPMGhsH1&#xA;ax1HUoXsJW4w3ltJc83hLHaKXkgMcnY7NVTsqjWVdZVfNvlJhDrcI+rahp9zWEXAhPx2V6m5imiJ&#xA;PpyUJQn9qNiGVZDoGv2Ot2JubYPFJE5hvLOYcJ7edKc4ZkqeLrX5EUZSVIJVTLFXYq6mKtUxV1MV&#xA;dTFXUxV1MVdirsVfHf5kafLbfmZ5ll1jTbu5WWeSSyVeSqwd1MTFwCTH6VQOPenhTFUiW00QW9vM&#xA;2m3PKS9nFzbAStIloI4THweqLyLmQCqn3rTdVKZ7GR7eH0rKaOdarN+7cq2wo1STvWu1KfqCqPQQ&#xA;D6gW0yYvb2c0NwfRFHuWkmaGUr0cKskYPL+XuOqrOvyQs724/NbR7q0sJobe2tpv0lKI/TjJNtIn&#xA;NlX4FUyMigdzvir6qpirsVWkYqtIxVYcVVhbEftfhiq8Q074q2I/fFV3AYqo3ouxZXBsghvBG/1Y&#xA;S1EZl4nhzpvx5Urirzb8spvz+bRbj/G1rpo1AXDfV/VlVJPR4ilRZLLDxrWm/LxxVmHq+fv+WfSv&#xA;+R9z/wBUcVUrn/lY0sDxQDSbWV/hW553E3p1NC4iKRhyo3ClgCe+KojQfL9hZWBtLYvJbTM015eS&#xA;tyuL6dwA800gpUNTtQEUVQIwAVVPyW6tb6txIPHVr8NQ1ofXOxxVZr2g6hb6gfMXl0KNYCql/YO3&#xA;CHUYU6RyHokyD+6l7fZaqHZVArEmutF5q8pzrZ60hFrqNrdqyLKsTUktL+Jauk0PImNx8SnpyRiC&#xA;qmXqef8A/ln0r/kfc/8AVHFXep5//wCWfSv+R9z/ANUcVd6nn/8A5Z9K/wCR9z/1RxV3qef/APln&#xA;0r/kfc/9UcVd6nn/AP5Z9K/5H3P/AFRxV3qef/8Aln0r/kfc/wDVHFXep5//AOWfSv8Akfc/9UcV&#xA;d6nn/wD5Z9K/5H3P/VHFXep5/wD+WfSv+R9z/wBUcVd6nn//AJZ9K/5H3P8A1RxV3Pz/AP8ALPpX&#xA;/I+5/wCqOKu5+fv+WfSv+R9z/wBUcVa5+fv+WfSv+R9z/wBUsVdz8/f8s+lf8j7n/qjiruXn7/ln&#xA;0r/kfc/9UcVWTt+Ynoyejb6R63E+nznuePKm1aRdK4qkX5Pn83ZNI1A/mXFBDqAuj9QEJgLGAqCe&#xA;X1YtHxDfZqeXWvbFWe+mcVaMLHuMVWG3c9xiqtyxV3LFXcsVdyxV3LFWuWKu5YqhtR0+G/tvQm3Q&#xA;1DKQGUhgVIKnbodvA/cVUUCAAB0G25qfvOKvPPyi/J6x/Lb9N/VdWutU/TM6TN9ZoPTEXPj0J5SN&#xA;6h5vtyoNhTFXofLFWOa7oV/BqB8x+XAo1gKqX9g7cIdRhTpHIeiTIP7qXt9lqodlUz0PX9P1uwF7&#xA;ZFgAzRXFvKvCaCZNpIZozukiHqPpFQQcVTDliruWKu5Yq7liruWKu5Yq82tvyX02G+W6F6i+nfR6&#xA;gDFZwRTSPHqaamFnnFZJPjj4DcUX3piqX6d/zj5oGnA/Vr31eT2krx3ltDcQs9ok6fHF8Cur/Wi1&#xA;HqQwFGptiqdad+Va2LWcceqn6nbvpss1uttFHzk0ogw8ShVY1YqOShfliqM8sflb5Z0C90m+hghm&#xA;vdJ0q30qO6eCISv9WRYxcM4HL1CicevTbFUX+YXkay866PbaZeTelFbXSXY+EsrMkboFYK8bU/eV&#xA;2YdMVYtY/kXplkdM9HUA50x9LliuJbWF7oNpKRJGiXAKtHFJ9XHNB1q2++KtH8h9Mlsp7G716/vL&#xA;W9vE1S9Wdbdme/EUsUlwlIwqmT1gWDK32FxVfon5G6Tperaffx35Y2H1Aoy28Szk6dAsCKtyS8qR&#xA;yhKyopo24+ztir0/liruWKu5Yq7liruWKqdcVdXFXVxV1cVdXFWq4q6oxVsNtirq4q6uKurirYbF&#xA;WNa9od/BqB8xeXQo1cKq31izcIdQhTpHIeiTIP7qXt9lqqdlVfy9538s6/K9rp99GdThQveaVIyp&#xA;e25VuDrPATzQo/wt26diKqp7XFXVxV1cVdXFXVxV1cVdXFXVxV1cVdXFXVxV1cVdXFXVxV1cVdXF&#xA;XVxV1cVUuWKu5Yq7liruWKu5Yq7liruWKthsVdyxV3LFWuWKth8VcWxVjGl+QNC03zPc+Yrd7lru&#xA;4NwyW0kpa3he8aN7l4o6bGZoVLVJ9qVxVk3LFXcsVdyxV3LFXcsVdyxV3LFXcsVdyxV3LFXcsVdy&#xA;xV3LFXcsVdyxV3LFXcsVdyxVv9x/l/hirv3H+X+GKu/cf5f4Yq79x/l/hirv3H+X+GKu/cf5f4Yq&#xA;79x/l/hirv3H+X+GKu/cf5f4Yq79x/l/hirv3H+X+GKu/cf5f4Yq79z/AJf4Yq79x/l/hirv3H+X&#xA;+GKu/cf5f4Yq79x/l/hirv3H+X+GKu/cf5f4Yq79x/l/hirv3H+X+GKu/cf5f4Yq79x/l/hirv3H&#xA;+X+GKu/cf5f4Yq79x/l/hirv3H+X+GKu/cf5f4Yq79x/l/hirv3H+X+GKu/cf5f4Yq79x/l/hir/&#xA;AP/Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2013-02-23T12:25:51+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2013-02-23T12:25:51+02:00</xmp:ModifyDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>772.058594</stDim:w>
            <stDim:h>636.140625</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>AutoCAD Color</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>114</xmpG:red>
                           <xmpG:green>153</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>AutoCAD Color 1</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:DocumentID>xmp.did:8F887E65A37DE21198EDC898ECA2A399</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:8F887E65A37DE21198EDC898ECA2A399</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:8F887E65A37DE21198EDC898ECA2A399</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8F887E65A37DE21198EDC898ECA2A399</stEvt:instanceID>
                  <stEvt:when>2013-02-23T12:25:51+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -636.141 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 636.141 li
772.059 636.141 li
772.059 0 li
cp
clp
[1 0 0 1 0 0 ]ct
772.059 636.141 mo
0 636.141 li
0 0 li
772.059 0 li
772.059 636.141 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.956863 .956863 .956863 rgb
f
0 628.435 mo
0 628.435 14.4678 441.787 15.6899 439.188 cv
16.9121 436.589 17.2681 340.59 16.9897 337.32 cv
16.7114 334.051 16.9897 214.872 13.8057 213.712 cv
7.79688 211.522 5.37451 18.9409 7.18799 13.6714 cv
8.01367 11.272 184.668 3.56055 189.917 3.56055 cv
199.522 3.56055 460.93 8.2749 460.449 16.3398 cv
459.985 24.1387 676.3 27.7593 668.407 28.2285 cv
667.596 28.2769 727.339 30.5806 727.372 33.4727 cv
727.398 35.6602 727.705 112.483 728.353 114.623 cv
729.718 119.138 730.824 184.411 731.573 184.914 cv
732.323 185.417 772.059 618.684 772.059 618.684 cv
772.059 629.549 li
322.527 629.409 li
322.527 629.409 303.114 630.937 302.37 631.193 cv
300.646 631.788 250.537 629.257 246.814 629.535 cv
243.092 629.814 175.863 631.658 177.212 629.814 cv
178.563 627.972 121.923 629.328 121.048 629.392 cv
120.173 629.456 0 629.549 0 629.549 cv
.960784 .960784 .960784 rgb
f
0 620.729 mo
0 620.729 28.9355 451.556 31.3799 446.356 cv
33.8247 441.158 34.5366 351.681 33.9795 345.142 cv
33.4224 338.602 33.9795 225.52 27.6108 223.199 cv
15.5938 218.819 10.749 37.8813 14.376 27.3428 cv
16.0273 22.5444 182.566 7.12109 193.062 7.12109 cv
212.273 7.12109 458.138 16.5498 457.178 32.6797 cv
456.25 48.2769 646.215 55.5186 630.429 56.4575 cv
628.807 56.5537 682.619 61.1606 682.687 66.9453 cv
682.737 71.3208 683.351 143.914 684.646 148.194 cv
687.377 157.224 689.59 216.48 691.089 217.486 cv
692.588 218.492 772.059 612.066 772.059 612.066 cv
772.059 622.957 li
319.591 622.678 li
319.591 622.678 302.75 625.731 301.262 626.245 cv
297.814 627.436 253.435 622.373 245.991 622.931 cv
238.547 623.488 174.554 627.176 177.253 623.489 cv
179.953 619.802 123.586 622.515 121.836 622.644 cv
120.085 622.771 0 622.957 0 622.957 cv
.964706 .964706 .964706 rgb
f
0 613.023 mo
0 613.023 43.4033 461.324 47.0698 453.526 cv
50.7368 445.729 51.8047 362.771 50.9692 352.962 cv
50.1338 343.153 50.9692 236.167 41.4165 232.686 cv
23.3911 226.117 16.1235 56.8223 21.564 41.0137 cv
24.041 33.8164 180.463 10.6812 196.208 10.6812 cv
225.024 10.6812 455.347 24.8247 453.906 49.0195 cv
452.514 72.4155 616.13 83.2778 592.451 84.686 cv
590.018 84.8311 637.899 91.7412 638.001 100.418 cv
638.077 106.981 638.997 175.344 640.939 181.765 cv
645.036 195.31 648.356 248.549 650.604 250.058 cv
652.852 251.567 772.059 605.45 772.059 605.45 cv
772.059 616.365 li
316.653 615.946 li
316.653 615.946 302.386 620.527 300.154 621.298 cv
294.982 623.084 256.334 615.489 245.167 616.325 cv
234.001 617.161 173.244 622.693 177.294 617.163 cv
181.344 611.633 125.249 615.702 122.623 615.895 cv
119.997 616.087 0 616.365 0 616.365 cv
.968627 .968627 .968627 rgb
f
0 605.317 mo
0 605.317 57.8711 471.092 62.7598 460.695 cv
67.6489 450.298 69.0728 373.861 67.959 360.783 cv
66.8452 347.705 67.959 246.815 55.2217 242.173 cv
31.188 233.415 21.498 75.7627 28.752 54.6851 cv
32.0547 45.0884 178.361 14.2417 199.354 14.2417 cv
237.775 14.2417 452.556 33.0996 450.636 65.3594 cv
448.778 96.5537 586.045 111.037 554.474 112.915 cv
551.229 113.108 593.18 122.321 593.314 133.89 cv
593.416 142.641 594.643 206.775 597.232 215.336 cv
602.695 233.395 607.122 280.618 610.119 282.63 cv
613.116 284.642 772.059 598.833 772.059 598.833 cv
772.059 609.774 li
313.717 609.216 li
313.717 609.216 302.022 615.322 299.047 616.35 cv
292.15 618.731 259.232 608.606 244.344 609.721 cv
229.456 610.835 171.935 618.211 177.335 610.837 cv
182.734 603.464 126.912 608.889 123.411 609.146 cv
119.909 609.402 0 609.774 0 609.774 cv
.972549 .972549 .972549 rgb
f
0 597.612 mo
0 597.612 72.3389 480.86 78.4497 467.864 cv
84.561 454.868 86.3413 384.952 84.9487 368.604 cv
83.5562 352.256 84.9487 257.463 69.0273 251.66 cv
38.9849 240.712 26.8726 94.7036 35.9399 68.3564 cv
40.0684 56.3604 176.259 17.8022 202.5 17.8022 cv
250.527 17.8022 449.765 41.3745 447.364 81.6992 cv
445.043 120.692 555.96 138.796 516.495 141.144 cv
512.439 141.385 548.46 152.902 548.629 167.363 cv
548.756 178.302 550.289 238.206 553.526 248.907 cv
560.354 271.481 565.888 312.687 569.634 315.202 cv
573.381 317.717 772.059 592.217 772.059 592.217 cv
772.059 603.183 li
310.78 602.484 li
310.78 602.484 301.658 610.118 297.939 611.402 cv
289.318 614.379 262.131 601.723 243.521 603.115 cv
224.91 604.509 170.626 613.729 177.375 604.512 cv
184.125 595.294 128.575 602.076 124.198 602.397 cv
119.821 602.718 0 603.183 0 603.183 cv
.976471 .976471 .976471 rgb
f
0 589.906 mo
0 589.906 86.8066 490.629 94.1401 475.033 cv
101.474 459.438 103.609 396.043 101.938 376.426 cv
100.268 356.808 101.938 268.11 82.8325 261.147 cv
46.7817 248.009 32.2471 113.644 43.1279 82.0278 cv
48.082 67.6328 174.156 21.3628 205.646 21.3628 cv
263.278 21.3628 446.973 49.6494 444.093 98.0396 cv
441.308 144.831 525.875 166.555 478.518 169.372 cv
473.65 169.662 503.74 183.482 503.942 200.835 cv
504.096 213.962 505.935 269.636 509.819 282.479 cv
518.014 309.567 524.653 344.755 529.149 347.773 cv
533.646 350.792 772.059 585.6 772.059 585.6 cv
772.059 596.591 li
307.843 595.753 li
307.843 595.753 301.294 604.913 296.832 606.454 cv
286.486 610.026 265.029 594.839 242.697 596.511 cv
220.364 598.183 169.317 609.246 177.417 598.186 cv
185.516 587.125 130.238 595.263 124.986 595.648 cv
119.733 596.033 0 596.591 0 596.591 cv
.980392 .980392 .980392 rgb
f
0 582.2 mo
0 582.2 101.274 500.397 109.83 482.202 cv
118.386 464.008 120.877 407.134 118.928 384.246 cv
116.979 361.359 118.928 278.758 96.6382 270.635 cv
54.5786 255.307 37.6216 132.585 50.3159 95.6987 cv
56.0957 78.9048 172.054 24.9229 208.792 24.9229 cv
276.029 24.9229 444.182 57.9243 440.821 114.379 cv
437.572 168.969 495.79 194.314 440.54 197.601 cv
434.861 197.938 459.021 214.063 459.257 234.308 cv
459.435 249.622 461.581 301.066 466.113 316.049 cv
475.673 347.652 483.419 376.824 488.664 380.346 cv
493.909 383.867 772.059 578.983 772.059 578.983 cv
772.059 589.999 li
304.906 589.021 li
304.906 589.021 300.93 599.709 295.724 601.507 cv
283.655 605.675 267.928 587.955 241.873 589.905 cv
215.818 591.856 168.008 604.764 177.457 591.859 cv
186.906 578.956 131.9 588.45 125.773 588.899 cv
119.646 589.35 0 589.999 0 589.999 cv
f
0 574.495 mo
0 574.495 115.742 510.166 125.52 489.371 cv
135.298 468.577 138.146 418.225 135.918 392.067 cv
133.69 365.91 135.918 289.406 110.443 280.122 cv
62.3755 262.604 42.9961 151.525 57.5039 109.37 cv
64.1094 90.1768 169.952 28.4834 211.937 28.4834 cv
288.78 28.4834 441.391 66.1992 437.55 130.719 cv
433.837 193.107 465.705 222.074 402.562 225.83 cv
396.072 226.215 414.302 244.643 414.57 267.781 cv
414.774 285.283 417.228 332.497 422.406 349.62 cv
433.332 385.738 442.186 408.893 448.18 412.918 cv
454.174 416.942 772.059 572.367 772.059 572.367 cv
772.059 583.407 li
301.969 582.29 li
301.969 582.29 300.566 594.505 294.616 596.56 cv
280.823 601.322 270.826 581.071 241.05 583.301 cv
211.273 585.53 166.699 600.281 177.498 585.534 cv
188.297 570.786 133.563 581.638 126.561 582.151 cv
119.558 582.665 0 583.407 0 583.407 cv
.984314 .984314 .984314 rgb
f
0 566.789 mo
0 566.789 130.209 519.935 141.21 496.541 cv
152.21 473.147 155.414 429.315 152.908 399.889 cv
150.401 370.462 152.908 300.053 124.249 289.609 cv
70.1729 269.902 48.3706 170.466 64.6919 123.042 cv
72.123 101.449 167.849 32.0439 215.083 32.0439 cv
301.532 32.0439 438.6 74.4741 434.278 147.059 cv
430.101 217.246 435.62 249.833 364.584 254.058 cv
357.283 254.493 369.582 275.223 369.885 301.253 cv
370.114 320.943 372.873 363.928 378.7 383.191 cv
390.991 423.824 400.951 440.962 407.694 445.489 cv
414.438 450.018 772.059 565.75 772.059 565.75 cv
772.059 576.815 li
299.032 575.559 li
299.032 575.559 300.202 589.3 293.508 591.611 cv
277.991 596.97 273.725 574.188 240.226 576.695 cv
206.727 579.203 165.389 595.799 177.539 579.208 cv
189.688 562.617 135.226 574.824 127.348 575.402 cv
119.47 575.98 0 576.815 0 576.815 cv
.988235 .988235 .988235 rgb
f
0 559.083 mo
0 559.083 144.677 529.702 156.9 503.71 cv
169.123 477.717 172.682 440.405 169.897 407.71 cv
167.113 375.014 169.897 310.701 138.054 299.096 cv
77.9697 277.199 53.7451 189.407 71.8799 136.713 cv
80.1367 112.721 165.747 35.6045 218.229 35.6045 cv
314.283 35.6045 435.808 82.749 431.008 163.399 cv
426.365 241.384 405.535 277.592 326.606 282.287 cv
318.494 282.77 324.862 305.803 325.198 334.726 cv
325.453 356.604 328.52 395.358 334.993 416.763 cv
348.65 461.909 359.717 473.03 367.21 478.062 cv
374.703 483.092 772.059 559.134 772.059 559.134 cv
772.059 570.225 li
296.095 568.828 li
296.095 568.828 299.838 584.096 292.401 586.664 cv
275.159 592.617 276.624 567.305 239.402 570.091 cv
202.182 572.877 164.08 591.316 177.579 572.882 cv
191.078 554.448 136.889 568.012 128.136 568.653 cv
119.382 569.296 0 570.225 0 570.225 cv
.992157 .992157 .992157 rgb
f
0 551.378 mo
0 551.378 159.145 539.471 172.59 510.879 cv
186.035 482.287 189.951 451.496 186.887 415.53 cv
183.824 379.564 186.887 321.349 151.86 308.583 cv
85.7666 284.497 59.1196 208.348 79.0679 150.384 cv
88.1504 123.993 163.645 39.1646 221.375 39.1646 cv
327.034 39.1646 433.017 91.0239 427.736 179.739 cv
422.63 265.523 375.45 305.351 288.628 310.516 cv
279.705 311.046 280.143 336.384 280.513 368.198 cv
280.793 392.264 284.166 426.789 291.287 450.333 cv
306.31 499.995 318.482 505.1 326.725 510.633 cv
334.968 516.167 772.059 552.517 772.059 552.517 cv
772.059 563.633 li
293.158 562.097 li
293.158 562.097 299.474 578.891 291.293 581.716 cv
272.328 588.266 279.522 560.421 238.579 563.485 cv
197.636 566.551 162.771 586.834 177.62 566.557 cv
192.469 546.278 138.552 561.198 128.923 561.905 cv
119.294 562.611 0 563.633 0 563.633 cv
.996078 .996078 .996078 rgb
f
0 543.672 mo
0 543.672 173.613 549.239 188.28 518.048 cv
202.947 486.856 207.219 462.587 203.877 423.352 cv
200.535 384.116 203.877 331.996 165.665 318.07 cv
93.5635 291.794 64.4941 227.288 86.2559 164.055 cv
96.1641 135.265 161.542 42.7251 224.521 42.7251 cv
339.785 42.7251 430.226 99.2988 424.465 196.079 cv
418.895 289.661 345.365 333.11 250.65 338.744 cv
233.552 339.761 229.541 424.266 247.581 483.904 cv
263.969 538.081 277.249 537.168 286.24 543.205 cv
295.232 549.242 772.059 545.9 772.059 545.9 cv
772.059 557.041 li
290.221 555.365 li
290.221 555.365 299.11 573.687 290.186 576.769 cv
269.496 583.913 282.42 553.537 237.755 556.881 cv
193.09 560.225 161.462 582.352 177.661 560.23 cv
193.859 538.109 140.214 554.386 129.71 555.156 cv
119.207 555.927 0 557.041 0 557.041 cv
1 1 1 rgb
f
680.24 538.335 mo
682.921 538.335 685.101 540.515 685.101 543.205 cv
685.101 545.885 682.921 548.065 680.24 548.065 cv
677.551 548.065 675.37 545.885 675.37 543.205 cv
675.37 540.515 677.551 538.335 680.24 538.335 cv
cp
0 0 0 rgb
f
423.091 211.585 mo
425.78 211.585 427.96 213.765 427.96 216.445 cv
427.96 219.135 425.78 221.315 423.091 221.315 cv
420.41 221.315 418.23 219.135 418.23 216.445 cv
418.23 213.765 420.41 211.585 423.091 211.585 cv
cp
f
416.96 148.925 mo
419.65 148.925 421.82 151.105 421.82 153.795 cv
421.82 156.475 419.65 158.655 416.96 158.655 cv
414.271 158.655 412.101 156.475 412.101 153.795 cv
412.101 151.105 414.271 148.925 416.96 148.925 cv
cp
f
382.19 92.9551 mo
384.881 92.9551 387.061 95.125 387.061 97.8149 cv
387.061 100.505 384.881 102.675 382.19 102.675 cv
379.511 102.675 377.33 100.505 377.33 97.8149 cv
377.33 95.125 379.511 92.9551 382.19 92.9551 cv
cp
f
364.4 242.055 mo
367.08 242.055 369.261 244.235 369.261 246.915 cv
369.261 249.605 367.08 251.785 364.4 251.785 cv
361.71 251.785 359.53 249.605 359.53 246.915 cv
359.53 244.235 361.71 242.055 364.4 242.055 cv
cp
f
354.36 124.865 mo
357.04 124.865 359.221 127.045 359.221 129.725 cv
359.221 132.415 357.04 134.595 354.36 134.595 cv
351.671 134.595 349.49 132.415 349.49 129.725 cv
349.49 127.045 351.671 124.865 354.36 124.865 cv
cp
f
303 316.525 mo
305.69 316.525 307.86 318.705 307.86 321.395 cv
307.86 324.075 305.69 326.255 303 326.255 cv
300.311 326.255 298.13 324.075 298.13 321.395 cv
298.13 318.705 300.311 316.525 303 316.525 cv
cp
f
278.17 170.435 mo
280.86 170.435 283.041 172.615 283.041 175.295 cv
283.041 177.985 280.86 180.165 278.17 180.165 cv
276.831 180.165 275.621 179.625 274.74 178.735 cv
273.86 177.855 273.311 176.645 273.311 175.295 cv
273.311 172.615 275.49 170.435 278.17 170.435 cv
cp
f
270.601 76.415 mo
273.291 76.415 275.47 78.585 275.47 81.2749 cv
275.47 83.9648 273.291 86.1348 270.601 86.1348 cv
267.92 86.1348 265.74 83.9648 265.74 81.2749 cv
265.74 78.585 267.92 76.415 270.601 76.415 cv
cp
f
223.101 555.365 mo
225.78 555.365 227.96 557.545 227.96 560.225 cv
227.96 562.915 225.78 565.095 223.101 565.095 cv
220.411 565.095 218.23 562.915 218.23 560.225 cv
218.23 557.545 220.411 555.365 223.101 555.365 cv
cp
f
219.661 42.7251 mo
222.351 42.7251 224.53 44.895 224.53 47.585 cv
224.53 50.2749 222.351 52.4448 219.661 52.4448 cv
216.98 52.4448 214.8 50.2749 214.8 47.585 cv
214.8 44.895 216.98 42.7251 219.661 42.7251 cv
cp
f
195.791 277.335 mo
198.48 277.335 200.65 279.515 200.65 282.205 cv
200.65 284.885 198.48 287.065 195.791 287.065 cv
193.101 287.065 190.92 284.885 190.92 282.205 cv
190.92 279.515 193.101 277.335 195.791 277.335 cv
cp
f
175.2 213.245 mo
177.891 213.245 180.07 215.425 180.07 218.115 cv
180.07 220.795 177.891 222.975 175.2 222.975 cv
172.521 222.975 170.34 220.795 170.34 218.115 cv
170.34 215.425 172.521 213.245 175.2 213.245 cv
cp
f
165.67 138.875 mo
168.351 138.875 170.53 141.045 170.53 143.735 cv
170.53 146.425 168.351 148.605 165.67 148.605 cv
162.98 148.605 160.8 146.425 160.8 143.735 cv
160.8 141.045 162.98 138.875 165.67 138.875 cv
cp
f
131.67 143.245 mo
134.36 143.245 136.541 145.425 136.541 148.115 cv
136.541 150.805 134.36 152.975 131.67 152.975 cv
130.32 152.975 129.11 152.435 128.23 151.555 cv
127.351 150.675 126.811 149.465 126.811 148.115 cv
126.811 145.425 128.98 143.245 131.67 143.245 cv
cp
f
124.851 538.335 mo
127.541 538.335 129.71 540.515 129.71 543.205 cv
129.71 545.885 127.541 548.065 124.851 548.065 cv
122.161 548.065 119.99 545.885 119.99 543.205 cv
119.99 540.515 122.161 538.335 124.851 538.335 cv
cp
f
100.65 259.755 mo
103.34 259.755 105.51 261.925 105.51 264.615 cv
105.51 265.965 104.97 267.175 104.09 268.055 cv
103.21 268.945 102 269.485 100.65 269.485 cv
97.9604 269.485 95.7803 267.305 95.7803 264.615 cv
95.7803 261.925 97.9604 259.755 100.65 259.755 cv
cp
f
86.2505 186.275 mo
88.9404 186.275 91.1206 188.455 91.1206 191.135 cv
91.1206 193.825 88.9404 196.005 86.2505 196.005 cv
83.5703 196.005 81.3906 193.825 81.3906 191.135 cv
81.3906 188.455 83.5703 186.275 86.2505 186.275 cv
cp
f
2 lw
1 lc
0 lj
4 ml
[] 0 dsh
true sadj
675.37 543.205 mo
286.24 543.205 li
@
242.3 377.865 mo
242.3 345.575 li
@
229.45 511.565 mo
229.45 473.205 li
@
286.24 543.205 mo
242.3 499.265 li
@
320.08 602.195 mo
229.45 511.565 li
@
242.3 345.575 mo
266.49 321.395 li
@
278.17 309.715 mo
294.11 293.765 li
@
1 lw
294.11 293.765 mo
323.101 264.785 li
335.561 252.315 li
@
2 lw
328.391 605.635 mo
328.391 602.955 326.21 600.775 323.521 600.775 cv
320.841 600.775 318.66 602.955 318.66 605.635 cv
318.66 608.325 320.841 610.505 323.521 610.505 cv
326.21 610.505 328.391 608.325 328.391 605.635 cv
cp
@
250.65 309.715 mo
278.17 309.715 li
@
301.811 301.895 mo
337.65 301.895 li
@
382.141 257.395 mo
419.65 219.885 li
@
337.65 301.895 mo
349.48 290.065 li
382.141 257.405 li
@
1 lw
335.561 252.315 mo
335.561 230.415 li
@
2 lw
334.04 217.965 mo
354.36 197.645 li
@
326.49 225.515 mo
334.04 217.975 li
@
1 lw
354.36 187.195 mo
369.9 171.655 li
382.19 159.355 li
407.83 133.715 li
@
382.19 159.355 mo
382.19 125.655 li
382.19 124.695 li
@
382.19 125.655 mo
357.801 101.255 li
@
2 lw
685.101 543.205 mo
685.101 540.515 682.921 538.335 680.24 538.335 cv
677.551 538.335 675.37 540.515 675.37 543.205 cv
675.37 545.885 677.551 548.065 680.24 548.065 cv
682.921 548.065 685.101 545.885 685.101 543.205 cv
cp
@
229.45 306.705 mo
245.581 290.575 li
256.141 280.015 li
@
278.22 257.935 mo
287.15 249.005 li
@
256.141 280.015 mo
256.141 251.455 li
256.141 219.415 li
@
129.71 543.205 mo
188.76 543.205 li
@
204.15 527.825 mo
204.15 482.335 li
@
188.76 543.205 mo
204.15 527.825 li
@
129.71 543.205 mo
129.71 540.515 127.541 538.335 124.851 538.335 cv
122.161 538.335 119.99 540.515 119.99 543.205 cv
119.99 545.885 122.161 548.065 124.851 548.065 cv
127.541 548.065 129.71 545.885 129.71 543.205 cv
cp
@
242.3 468.545 mo
233.21 459.455 li
@
233.21 459.455 mo
233.21 386.945 li
@
233.21 386.945 mo
242.3 377.865 li
@
242.3 468.545 mo
242.3 499.265 li
@
229.45 473.205 mo
225.86 469.615 li
@
225.86 469.615 mo
225.86 378.915 li
@
225.86 378.915 mo
229.45 375.325 li
@
229.45 375.325 mo
229.45 330.905 li
229.45 306.705 li
@
204.15 482.335 mo
197.96 476.155 li
@
197.96 476.155 mo
197.96 406.685 li
@
203.121 355.885 mo
175.2 327.965 li
@
103.271 242.375 mo
103.271 231.265 li
@
1 lw
108.811 185.845 mo
108.811 170.975 li
108.811 139.025 li
@
210.181 301.665 mo
210.181 228.155 li
@
2 lw
219.5 267.095 mo
219.5 471.915 li
@
1 lw
191.661 556.795 mo
214.24 534.215 li
@
193.09 560.225 mo
193.09 558.885 192.541 557.675 191.661 556.795 cv
190.791 555.915 189.57 555.365 188.22 555.365 cv
185.541 555.365 183.36 557.545 183.36 560.225 cv
183.36 562.915 185.541 565.095 188.22 565.095 cv
190.911 565.095 193.09 562.915 193.09 560.225 cv
cp
@
2 lw
227.96 560.225 mo
227.96 557.545 225.78 555.365 223.101 555.365 cv
220.411 555.365 218.23 557.545 218.23 560.225 cv
218.23 562.915 220.411 565.095 223.101 565.095 cv
225.78 565.095 227.96 562.915 227.96 560.225 cv
cp
@
1 lw
349.48 290.065 mo
372.94 290.065 li
@
2 lw
427.96 216.445 mo
427.96 213.765 425.78 211.585 423.091 211.585 cv
420.41 211.585 418.23 213.765 418.23 216.445 cv
418.23 219.135 420.41 221.315 423.091 221.315 cv
425.78 221.315 427.96 219.135 427.96 216.445 cv
cp
@
1 lw
416.141 130.275 mo
416.141 127.585 413.96 125.415 411.28 125.415 cv
408.591 125.415 406.41 127.585 406.41 130.275 cv
406.41 132.965 408.591 135.145 411.28 135.145 cv
413.96 135.145 416.141 132.965 416.141 130.275 cv
cp
@
359.221 97.8149 mo
359.221 95.125 357.04 92.9551 354.36 92.9551 cv
351.671 92.9551 349.49 95.125 349.49 97.8149 cv
349.49 100.505 351.671 102.675 354.36 102.675 cv
355.7 102.675 356.921 102.135 357.801 101.255 cv
358.681 100.375 359.221 99.165 359.221 97.8149 cv
cp
@
314.67 226.345 mo
314.67 223.665 312.49 221.485 309.811 221.485 cv
307.121 221.485 304.94 223.665 304.94 226.345 cv
304.94 227.685 305.48 228.905 306.371 229.785 cv
307.25 230.665 308.46 231.215 309.811 231.215 cv
312.49 231.215 314.67 229.035 314.67 226.345 cv
cp
@
335.561 230.415 mo
372.73 193.245 li
@
372.73 193.245 mo
388.021 193.245 li
@
397.75 193.245 mo
397.75 190.555 395.57 188.375 392.881 188.375 cv
390.2 188.375 388.021 190.555 388.021 193.245 cv
388.021 195.925 390.2 198.105 392.881 198.105 cv
395.57 198.105 397.75 195.925 397.75 193.245 cv
cp
@
334.04 217.975 mo
334.04 217.965 li
334.04 174.205 li
@
338.9 169.345 mo
338.9 166.655 336.721 164.485 334.04 164.485 cv
331.351 164.485 329.171 166.655 329.171 169.345 cv
329.171 172.035 331.351 174.205 334.04 174.205 cv
336.721 174.205 338.9 172.035 338.9 169.345 cv
cp
@
2 lw
326.49 241.005 mo
326.49 225.515 li
@
294.11 293.765 mo
294.11 273.385 li
@
294.11 273.385 mo
326.49 241.005 li
@
1 lw
323.101 264.785 mo
346.53 264.785 li
@
346.53 264.785 mo
360.95 250.355 li
@
369.261 246.915 mo
369.261 244.235 367.08 242.055 364.4 242.055 cv
361.71 242.055 359.53 244.235 359.53 246.915 cv
359.53 249.605 361.71 251.785 364.4 251.785 cv
367.08 251.785 369.261 249.605 369.261 246.915 cv
cp
@
2 lw
354.36 197.645 mo
354.36 187.195 li
354.36 134.595 li
@
359.221 129.725 mo
359.221 127.045 357.04 124.865 354.36 124.865 cv
351.671 124.865 349.49 127.045 349.49 129.725 cv
349.49 132.415 351.671 134.595 354.36 134.595 cv
357.04 134.595 359.221 132.415 359.221 129.725 cv
cp
@
266.181 187.295 mo
274.74 178.735 li
@
266.181 209.375 mo
266.181 187.295 li
@
256.141 219.415 mo
266.181 209.375 li
@
283.041 175.295 mo
283.041 172.615 280.86 170.435 278.17 170.435 cv
275.49 170.435 273.311 172.615 273.311 175.295 cv
273.311 176.645 273.86 177.855 274.74 178.735 cv
275.621 179.625 276.831 180.165 278.17 180.165 cv
280.86 180.165 283.041 177.985 283.041 175.295 cv
cp
@
1 lw
256.141 219.415 mo
256.141 201.945 li
@
229.541 92.395 mo
238.101 83.835 li
@
229.541 228.725 mo
229.541 141.255 li
229.541 92.395 li
@
2 lw
219.5 267.095 mo
229.541 257.055 li
@
1 lw
246.4 80.395 mo
246.4 77.7051 244.22 75.5352 241.541 75.5352 cv
238.851 75.5352 236.67 77.7051 236.67 80.395 cv
236.67 81.7451 237.22 82.9551 238.101 83.835 cv
238.98 84.7251 240.2 85.2651 241.541 85.2651 cv
244.22 85.2651 246.4 83.085 246.4 80.395 cv
cp
@
2 lw
229.541 228.725 mo
209.63 208.805 li
@
209.63 208.805 mo
209.63 156.165 li
@
1 lw
209.63 90.5249 mo
193.36 74.2549 li
@
194.78 70.8149 mo
194.78 68.125 192.601 65.9448 189.92 65.9448 cv
187.23 65.9448 185.05 68.125 185.05 70.8149 cv
185.05 73.4951 187.23 75.6748 189.92 75.6748 cv
192.601 75.6748 194.78 73.4951 194.78 70.8149 cv
cp
@
229.541 141.255 mo
258.47 112.325 li
@
258.47 112.325 mo
258.47 61.7651 li
@
263.331 56.9048 mo
263.331 54.2148 261.15 52.0352 258.47 52.0352 cv
255.78 52.0352 253.601 54.2148 253.601 56.9048 cv
253.601 59.585 255.78 61.7651 258.47 61.7651 cv
261.15 61.7651 263.331 59.585 263.331 56.9048 cv
cp
@
256.141 146.805 mo
270.601 132.345 li
@
270.601 132.345 mo
270.601 86.1348 li
@
275.47 81.2749 mo
275.47 78.585 273.291 76.415 270.601 76.415 cv
267.92 76.415 265.74 78.585 265.74 81.2749 cv
265.74 83.9648 267.92 86.1348 270.601 86.1348 cv
273.291 86.1348 275.47 83.9648 275.47 81.2749 cv
cp
@
2 lw
266.49 321.395 mo
282.311 321.395 li
@
1 lw
307.86 321.395 mo
307.86 318.705 305.69 316.525 303 316.525 cv
300.311 316.525 298.13 318.705 298.13 321.395 cv
298.13 324.075 300.311 326.255 303 326.255 cv
305.69 326.255 307.86 324.075 307.86 321.395 cv
cp
@
139.24 278.345 mo
114.371 278.345 li
@
2 lw
175.2 327.965 mo
175.2 314.305 li
175.2 286.365 li
@
165.161 254.245 mo
144.19 233.275 li
@
165.161 276.325 mo
165.161 254.245 li
@
175.2 286.365 mo
165.161 276.325 li
@
145.621 229.835 mo
145.621 227.155 143.44 224.975 140.75 224.975 cv
138.07 224.975 135.891 227.155 135.891 229.835 cv
135.891 232.525 138.07 234.705 140.75 234.705 cv
142.101 234.705 143.311 234.165 144.19 233.275 cv
145.081 232.395 145.621 231.185 145.621 229.835 cv
cp
@
1 lw
175.2 286.365 mo
175.2 222.975 li
@
180.07 218.115 mo
180.07 215.425 177.891 213.245 175.2 213.245 cv
172.521 213.245 170.34 215.425 170.34 218.115 cv
170.34 220.795 172.521 222.975 175.2 222.975 cv
177.891 222.975 180.07 220.795 180.07 218.115 cv
cp
@
210.181 228.155 mo
188.57 206.545 li
148.101 166.075 li
@
188.57 206.545 mo
188.57 188.505 li
188.57 119.145 li
@
193.431 114.275 mo
193.431 111.585 191.25 109.415 188.57 109.415 cv
185.88 109.415 183.7 111.585 183.7 114.275 cv
183.7 116.965 185.88 119.145 188.57 119.145 cv
191.25 119.145 193.431 116.965 193.431 114.275 cv
cp
@
177.661 155.725 mo
169.11 147.175 li
@
177.661 177.605 mo
177.661 155.725 li
@
170.53 143.735 mo
170.53 141.045 168.351 138.875 165.67 138.875 cv
162.98 138.875 160.8 141.045 160.8 143.735 cv
160.8 146.425 162.98 148.605 165.67 148.605 cv
168.351 148.605 170.53 146.425 170.53 143.735 cv
cp
@
148.101 166.075 mo
148.101 110.035 li
@
152.96 105.165 mo
152.96 102.485 150.791 100.305 148.101 100.305 cv
145.411 100.305 143.24 102.485 143.24 105.165 cv
143.24 107.855 145.411 110.035 148.101 110.035 cv
150.791 110.035 152.96 107.855 152.96 105.165 cv
cp
@
2 lw
175.2 314.305 mo
139.24 278.345 li
103.271 242.375 li
@
1 lw
114.371 278.345 mo
104.09 268.055 li
@
105.51 264.615 mo
105.51 261.925 103.34 259.755 100.65 259.755 cv
97.9604 259.755 95.7803 261.925 95.7803 264.615 cv
95.7803 267.305 97.9604 269.485 100.65 269.485 cv
102 269.485 103.21 268.945 104.09 268.055 cv
104.97 267.175 105.51 265.965 105.51 264.615 cv
cp
@
2 lw
103.271 231.265 mo
86.2505 214.245 li
@
1 lw
113.681 134.155 mo
113.681 131.475 111.5 129.295 108.811 129.295 cv
106.13 129.295 103.95 131.475 103.95 134.155 cv
103.95 136.845 106.13 139.025 108.811 139.025 cv
111.5 139.025 113.681 136.845 113.681 134.155 cv
cp
@
266.181 157.435 mo
288.48 135.145 li
@
288.48 135.145 mo
288.48 92.0649 li
@
195.791 330.305 mo
195.791 316.045 li
195.791 287.065 li
@
212.67 347.185 mo
195.791 330.305 li
@
200.65 282.205 mo
200.65 279.515 198.48 277.335 195.791 277.335 cv
193.101 277.335 190.92 279.515 190.92 282.205 cv
190.92 284.885 193.101 287.065 195.791 287.065 cv
198.48 287.065 200.65 284.885 200.65 282.205 cv
cp
@
108.811 170.975 mo
128.23 151.555 li
@
136.541 148.115 mo
136.541 145.425 134.36 143.245 131.67 143.245 cv
128.98 143.245 126.811 145.425 126.811 148.115 cv
126.811 149.465 127.351 150.675 128.23 151.555 cv
129.11 152.435 130.32 152.975 131.67 152.975 cv
134.36 152.975 136.541 150.805 136.541 148.115 cv
cp
@
382.19 124.695 mo
382.19 102.675 li
@
387.061 97.8149 mo
387.061 95.125 384.881 92.9551 382.19 92.9551 cv
379.511 92.9551 377.33 95.125 377.33 97.8149 cv
377.33 100.505 379.511 102.675 382.19 102.675 cv
384.881 102.675 387.061 100.505 387.061 97.8149 cv
cp
@
2 lw
223.101 555.365 mo
223.101 475.515 li
@
223.101 475.515 mo
219.5 471.915 li
@
287.15 249.005 mo
287.15 184.085 li
@
287.15 184.085 mo
307.17 164.055 li
@
307.17 164.055 mo
307.17 135.265 li
@
307.17 135.265 mo
321.601 120.835 li
@
329.9 117.395 mo
329.9 114.715 327.73 112.535 325.04 112.535 cv
322.351 112.535 320.181 114.715 320.181 117.395 cv
320.181 118.745 320.721 119.955 321.601 120.835 cv
322.48 121.725 323.7 122.265 325.04 122.265 cv
327.73 122.265 329.9 120.085 329.9 117.395 cv
cp
@
219.661 146.125 mo
219.661 52.4448 li
@
209.63 156.165 mo
219.661 146.125 li
@
224.53 47.585 mo
224.53 44.895 222.351 42.7251 219.661 42.7251 cv
216.98 42.7251 214.8 44.895 214.8 47.585 cv
214.8 50.2749 216.98 52.4448 219.661 52.4448 cv
222.351 52.4448 224.53 50.2749 224.53 47.585 cv
cp
@
1 lw
212.67 407.185 mo
212.67 347.185 li
@
214.24 534.215 mo
214.24 478.695 li
@
214.24 478.695 mo
207.28 471.745 li
@
2 lw
203.121 355.885 mo
203.121 401.525 li
@
197.96 406.685 mo
203.121 401.525 li
@
1 lw
195.791 316.045 mo
210.181 301.665 li
@
207.28 412.575 mo
212.67 407.185 li
@
207.28 412.575 mo
207.28 471.745 li
@
369.9 171.655 mo
399.101 171.655 li
@
2 lw
282.311 321.395 mo
301.811 301.895 li
@
1 lw
282.311 321.395 mo
298.13 321.395 li
@
372.94 290.065 mo
387.37 275.645 li
@
395.671 272.205 mo
395.671 269.515 393.49 267.335 390.811 267.335 cv
388.12 267.335 385.94 269.515 385.94 272.205 cv
385.94 273.545 386.48 274.765 387.37 275.645 cv
388.25 276.525 389.46 277.065 390.811 277.065 cv
393.49 277.065 395.671 274.885 395.671 272.205 cv
cp
@
382.141 257.405 mo
382.141 257.395 li
382.141 223.425 li
@
382.141 223.425 mo
389.44 216.125 li
@
397.75 212.685 mo
397.75 209.995 395.57 207.815 392.881 207.815 cv
390.2 207.815 388.021 209.995 388.021 212.685 cv
388.021 214.025 388.561 215.245 389.44 216.125 cv
390.32 217.005 391.54 217.545 392.881 217.545 cv
395.57 217.545 397.75 215.375 397.75 212.685 cv
cp
@
307.17 96.6348 mo
326.771 77.0352 li
@
335.08 73.5952 mo
335.08 70.915 332.9 68.7349 330.21 68.7349 cv
327.521 68.7349 325.351 70.915 325.351 73.5952 cv
325.351 74.9448 325.891 76.1548 326.771 77.0352 cv
327.65 77.9248 328.86 78.4648 330.21 78.4648 cv
332.9 78.4648 335.08 76.2852 335.08 73.5952 cv
cp
@
288.48 92.0649 mo
288.48 57.7852 li
@
293.34 52.9248 mo
293.34 50.2349 291.161 48.0552 288.48 48.0552 cv
285.791 48.0552 283.61 50.2349 283.61 52.9248 cv
283.61 55.605 285.791 57.7852 288.48 57.7852 cv
291.161 57.7852 293.34 55.605 293.34 52.9248 cv
cp
@
256.141 201.945 mo
247.581 193.395 li
@
249.01 189.955 mo
249.01 187.265 246.831 185.085 244.15 185.085 cv
241.46 185.085 239.28 187.265 239.28 189.955 cv
239.28 192.635 241.46 194.815 244.15 194.815 cv
246.831 194.815 249.01 192.635 249.01 189.955 cv
cp
@
2 lw
229.45 330.905 mo
250.65 309.715 li
@
1 lw
399.101 171.655 mo
413.521 157.235 li
@
421.82 153.795 mo
421.82 151.105 419.65 148.925 416.96 148.925 cv
414.271 148.925 412.101 151.105 412.101 153.795 cv
412.101 156.475 414.271 158.655 416.96 158.655 cv
419.65 158.655 421.82 156.475 421.82 153.795 cv
cp
@
2 lw
86.2505 214.245 mo
86.2505 196.005 li
@
91.1206 191.135 mo
91.1206 188.455 88.9404 186.275 86.2505 186.275 cv
83.5703 186.275 81.3906 188.455 81.3906 191.135 cv
81.3906 193.825 83.5703 196.005 86.2505 196.005 cv
88.9404 196.005 91.1206 193.825 91.1206 191.135 cv
cp
@
1 lw
188.57 188.505 mo
177.661 177.605 li
@
116.141 204.165 mo
128.521 204.165 li
@
103.271 217.035 mo
116.141 204.165 li
@
138.25 204.165 mo
138.25 201.475 136.07 199.305 133.391 199.305 cv
130.7 199.305 128.521 201.475 128.521 204.165 cv
128.521 206.855 130.7 209.025 133.391 209.025 cv
136.07 209.025 138.25 206.855 138.25 204.165 cv
cp
@
103.271 191.395 mo
108.811 185.845 li
@
2 lw
229.541 228.725 mo
229.541 257.055 li
@
1 lw
256.141 201.945 mo
256.141 146.805 li
@
2 lw
257.771 290.575 mo
278.22 270.125 li
@
245.581 290.575 mo
257.771 290.575 li
@
278.22 270.125 mo
278.22 257.935 li
@
1 lw
256.141 251.455 mo
270.561 237.035 li
@
278.871 233.595 mo
278.871 230.905 276.69 228.725 274 228.725 cv
271.32 228.725 269.141 230.905 269.141 233.595 cv
269.141 236.275 271.32 238.455 274 238.455 cv
276.69 238.455 278.871 236.275 278.871 233.595 cv
cp
@
266.181 187.295 mo
266.181 157.435 li
@
209.63 90.5249 mo
209.63 156.165 li
@
103.271 191.395 mo
103.271 217.035 li
103.271 231.265 li
@
287.15 249.005 mo
306.371 229.785 li
@
307.17 96.6348 mo
307.17 135.265 li
@
627.756 511.292 mo
625.155 511.292 623.24 513.036 623.24 516.321 cv
623.24 519.458 625.02 521.24 627.756 521.24 cv
630.8 521.24 632.27 519.291 632.27 516.21 cv
632.27 513.24 630.902 511.292 627.756 511.292 cv
cp
.219608 .219608 .219608 rgb
f
571.39 514.428 mo
569.336 514.428 567.387 515.208 566.839 516.433 cv
566.736 516.638 566.634 516.879 566.634 517.083 cv
566.634 518.642 li
566.634 518.883 566.668 519.105 566.771 519.31 cv
567.318 520.442 569.131 521.222 571.286 521.222 cv
574.468 521.222 576.313 519.812 576.313 517.751 cv
576.313 515.969 574.57 514.428 571.39 514.428 cv
cp
f
552.851 514.298 mo
549.772 514.298 548.472 515.802 548.232 516.935 cv
557.022 516.935 li
557.057 515.913 556.237 514.298 552.851 514.298 cv
cp
f
627.585 522.502 mo
623.24 522.502 620.265 520.294 620.196 516.303 cv
620.196 512.238 623.445 510.029 627.961 510.029 cv
632.612 510.029 635.313 512.294 635.313 516.136 cv
635.313 520.238 632.475 522.502 627.585 522.502 cv
cp
612.398 522.299 mo
609.491 522.299 li
609.491 511.756 li
609.423 511.756 li
605.558 512.888 li
604.976 511.645 li
609.833 510.233 li
612.398 510.233 li
612.398 522.299 li
cp
586.643 522.502 mo
584.83 522.502 583.153 522.243 581.991 521.872 cv
582.71 520.646 li
583.633 520.943 585.207 521.277 586.711 521.277 cv
588.867 521.277 589.892 520.702 589.892 519.94 cv
589.892 519.161 589.038 518.753 586.848 518.308 cv
583.838 517.714 582.437 516.842 582.437 515.765 cv
582.437 514.317 584.625 513.13 588.148 513.13 cv
589.823 513.13 591.295 513.371 592.185 513.687 cv
591.466 514.874 li
590.815 514.651 589.618 514.336 588.08 514.336 cv
586.3 514.336 585.344 514.893 585.344 515.561 cv
585.344 516.303 586.3 516.638 588.456 517.101 cv
591.295 517.677 592.801 518.456 592.801 519.793 cv
592.801 521.389 590.508 522.502 586.643 522.502 cv
cp
571.798 522.502 mo
569.609 522.502 567.695 521.982 566.702 521.092 cv
566.634 521.092 li
566.634 525.974 li
563.658 525.974 li
563.658 516.247 li
563.658 515.097 563.59 514.169 563.521 513.315 cv
566.189 513.315 li
566.36 514.855 li
566.429 514.855 li
567.627 513.76 569.609 513.13 572.312 513.13 cv
576.349 513.13 579.358 514.967 579.358 517.677 cv
579.358 520.906 575.698 522.502 571.798 522.502 cv
cp
559.827 518.104 mo
548.198 518.104 li
548.267 520.312 550.832 521.222 553.876 521.222 cv
556.032 521.222 557.365 521.018 558.46 520.758 cv
559.008 521.927 li
557.946 522.187 556.101 522.502 553.465 522.502 cv
548.369 522.502 545.325 520.665 545.325 517.955 cv
545.325 515.245 548.267 513.13 553.091 513.13 cv
558.528 513.13 559.93 515.691 559.93 517.342 cv
559.93 517.677 559.896 517.918 559.827 518.104 cv
cp
639.947 504.845 mo
540.048 504.845 li
537.297 504.845 535.059 507.084 535.059 509.836 cv
535.059 524.536 li
535.059 527.287 537.297 529.526 540.048 529.526 cv
639.947 529.526 li
642.699 529.526 644.938 527.287 644.938 524.536 cv
644.938 509.836 li
644.938 507.084 642.699 504.845 639.947 504.845 cv
cp
f
469.893 557.02 mo
463.225 557.02 li
463.225 563.359 li
469.893 563.359 li
469.893 561.203 li
472.389 561.707 li
472.389 562.902 li
472.389 563.824 472.205 564.455 471.838 564.795 cv
471.471 565.135 470.768 565.305 469.729 565.305 cv
463.389 565.305 li
462.365 565.305 461.67 565.137 461.303 564.801 cv
460.936 564.465 460.752 563.832 460.752 562.902 cv
460.752 557.547 li
460.752 556.625 460.934 555.996 461.297 555.66 cv
461.66 555.324 462.357 555.156 463.389 555.156 cv
469.729 555.156 li
470.775 555.156 471.48 555.324 471.844 555.66 cv
472.207 555.996 472.389 556.625 472.389 557.547 cv
472.389 558.531 li
469.893 558.895 li
469.893 557.02 li
cp
0 0 0 rgb
f
476.455 565.305 mo
476.455 555.156 li
478.916 555.156 li
478.916 565.305 li
476.455 565.305 li
cp
f
491.525 556.902 mo
485.877 556.902 li
485.877 559.715 li
491.525 559.715 li
491.955 559.715 492.25 559.652 492.41 559.527 cv
492.57 559.402 492.65 559.191 492.65 558.895 cv
492.65 557.723 li
492.65 557.426 492.57 557.215 492.41 557.09 cv
492.25 556.965 491.955 556.902 491.525 556.902 cv
cp
483.439 565.305 mo
483.439 555.156 li
492.58 555.156 li
493.416 555.156 494.021 555.311 494.396 555.619 cv
494.771 555.928 494.959 556.43 494.959 557.125 cv
494.959 559.516 li
494.959 560.203 494.771 560.699 494.396 561.004 cv
494.021 561.309 493.416 561.461 492.58 561.461 cv
491.186 561.461 li
496.014 565.305 li
492.463 565.305 li
488.209 561.461 li
485.877 561.461 li
485.877 565.305 li
483.439 565.305 li
cp
f
507.932 557.02 mo
501.264 557.02 li
501.264 563.359 li
507.932 563.359 li
507.932 561.203 li
510.428 561.707 li
510.428 562.902 li
510.428 563.824 510.244 564.455 509.877 564.795 cv
509.51 565.135 508.807 565.305 507.768 565.305 cv
501.428 565.305 li
500.404 565.305 499.709 565.137 499.342 564.801 cv
498.975 564.465 498.791 563.832 498.791 562.902 cv
498.791 557.547 li
498.791 556.625 498.973 555.996 499.336 555.66 cv
499.699 555.324 500.396 555.156 501.428 555.156 cv
507.768 555.156 li
508.814 555.156 509.52 555.324 509.883 555.66 cv
510.246 555.996 510.428 556.625 510.428 557.547 cv
510.428 558.531 li
507.932 558.895 li
507.932 557.02 li
cp
f
516.955 555.156 mo
516.955 563.406 li
524.021 563.406 li
524.021 555.156 li
526.518 555.156 li
526.518 562.902 li
526.518 563.824 526.332 564.455 525.961 564.795 cv
525.59 565.135 524.885 565.305 523.846 565.305 cv
517.131 565.305 li
516.1 565.305 515.402 565.137 515.039 564.801 cv
514.676 564.465 514.494 563.832 514.494 562.902 cv
514.494 555.156 li
516.955 555.156 li
cp
f
531.029 565.305 mo
531.029 555.156 li
533.49 555.156 li
533.49 565.305 li
531.029 565.305 li
cp
f
544.061 556.973 mo
544.061 565.305 li
541.588 565.305 li
541.588 556.973 li
536.689 556.973 li
536.689 555.156 li
548.971 555.156 li
548.971 556.973 li
544.061 556.973 li
cp
f
578.736 560.887 mo
573.193 560.887 li
573.193 563.477 li
578.736 563.477 li
579.205 563.477 579.523 563.41 579.691 563.277 cv
579.859 563.145 579.943 562.91 579.943 562.574 cv
579.943 561.801 li
579.943 561.465 579.859 561.229 579.691 561.092 cv
579.523 560.955 579.205 560.887 578.736 560.887 cv
cp
578.736 556.809 mo
573.193 556.809 li
573.193 559.211 li
578.736 559.211 li
579.166 559.211 579.459 559.156 579.615 559.047 cv
579.771 558.938 579.85 558.75 579.85 558.484 cv
579.85 557.523 li
579.85 557.258 579.773 557.072 579.621 556.967 cv
579.469 556.861 579.174 556.809 578.736 556.809 cv
cp
570.756 565.305 mo
570.756 555.156 li
579.873 555.156 li
580.725 555.156 581.338 555.311 581.713 555.619 cv
582.088 555.928 582.275 556.43 582.275 557.125 cv
582.275 558.344 li
582.275 558.805 582.127 559.184 581.83 559.48 cv
581.533 559.777 581.104 559.977 580.541 560.078 cv
581.111 560.172 581.555 560.389 581.871 560.729 cv
582.188 561.068 582.346 561.496 582.346 562.012 cv
582.346 563.313 li
582.346 563.977 582.084 564.475 581.561 564.807 cv
581.037 565.139 580.248 565.305 579.193 565.305 cv
570.756 565.305 li
cp
f
588.756 563.359 mo
596.936 563.359 li
596.936 557.02 li
588.756 557.02 li
588.756 563.359 li
cp
586.283 557.547 mo
586.283 556.625 586.463 555.996 586.822 555.66 cv
587.182 555.324 587.881 555.156 588.92 555.156 cv
596.771 555.156 li
597.818 555.156 598.52 555.324 598.875 555.66 cv
599.23 555.996 599.408 556.625 599.408 557.547 cv
599.408 562.902 li
599.408 563.832 599.227 564.465 598.863 564.801 cv
598.5 565.137 597.803 565.305 596.771 565.305 cv
588.92 565.305 li
587.881 565.305 587.182 565.137 586.822 564.801 cv
586.463 564.465 586.283 563.832 586.283 562.902 cv
586.283 557.547 li
cp
f
606.943 561.227 mo
611.596 561.227 li
609.229 556.996 li
606.943 561.227 li
cp
602.139 565.305 mo
608.162 555.156 li
610.541 555.156 li
616.658 565.305 li
613.881 565.305 li
612.604 563.078 li
605.889 563.078 li
604.611 565.305 li
602.139 565.305 li
cp
f
627.275 556.902 mo
621.627 556.902 li
621.627 559.715 li
627.275 559.715 li
627.705 559.715 628 559.652 628.16 559.527 cv
628.32 559.402 628.4 559.191 628.4 558.895 cv
628.4 557.723 li
628.4 557.426 628.32 557.215 628.16 557.09 cv
628 556.965 627.705 556.902 627.275 556.902 cv
cp
619.189 565.305 mo
619.189 555.156 li
628.33 555.156 li
629.166 555.156 629.771 555.311 630.146 555.619 cv
630.521 555.928 630.709 556.43 630.709 557.125 cv
630.709 559.516 li
630.709 560.203 630.521 560.699 630.146 561.004 cv
629.771 561.309 629.166 561.461 628.33 561.461 cv
626.936 561.461 li
631.764 565.305 li
628.213 565.305 li
623.959 561.461 li
621.627 561.461 li
621.627 565.305 li
619.189 565.305 li
cp
f
637.283 563.406 mo
640.471 563.406 li
642.213 563.406 643.432 563.152 644.127 562.645 cv
644.822 562.137 645.17 561.281 645.17 560.078 cv
645.17 559.031 644.881 558.252 644.303 557.74 cv
643.725 557.229 642.838 556.973 641.643 556.973 cv
637.283 556.973 li
637.283 563.406 li
cp
634.787 565.305 mo
634.787 555.156 li
641.619 555.156 li
643.58 555.156 645.086 555.592 646.137 556.463 cv
647.188 557.334 647.713 558.578 647.713 560.195 cv
647.713 561.898 647.156 563.176 646.043 564.027 cv
644.93 564.879 643.248 565.305 640.998 565.305 cv
634.787 565.305 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 14.0.0
%%For: (Administrator) ()
%%Title: (tree circuit with wind.eps)
%%CreationDate: 2/23/2013 12:26 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb!U'kuo%JZ8R#XYNP.sOCp6i=4UW,D'XdNCi!q'`j76B!AYRt,eA3g+6V?R]TH\5%,G]Iqt.ARCY;T6.l/q9k)?CSGHX$;)#"6p
%PNLr@<blDK>7hJGPLa4#s6X1fmQDZYok/t:FYCmHC)GMH&]FlDl9_:14X00r+5sKUUjFi]O6:GYPAYk.gRJ["e(JJQo?Y^lp8W1#
%^N=34qnqCRO'6VWl(69YNU>qVHSFfq-dtq*?An+j",$(?n@KQ$731<mJo?^^_i%k$%6`V;D3*oT)?5kIk:c`2q4)E$;$AZ-He*;$
%=fluB0MH.,oHCA_[=uW>I'VF=aWVGiaAPaZJ&S$p6N--<Ig_nCqBppKI+ju!-KD<->@Ta\=RZ"147WWnAsKu4TH@sOrc.+13*.-S
%<qLCG=HhS0Sc^b.VgtF:fZ=*R2j##/rbk6`J$rMU'0c<$TGG[ihRmQ2$stoK]il9#cb=]jPQkNQ0ToOkKDt(^fU;K%28Vc2,Oe1\
%"a/co-%LH#QC/hNdX%.T=cHN4LhPR#%4!(=r-B!0R<lZS;ucSXs,Y^ao7!UhT.7!X9]u;*s!I/)&taD)NGEMFf1"oBWkmQ2YWmOp
%*mBJ05/T.d5-H<Hr_PA+lDQl4J7VuSn_^@c6"bMlT9Df>L)3r5&dM54pA/7*e+p<\4qH-c]BB.__;mbS]HTaA:V;2\-Ah#-&-^!t
%BpQ[p&U7_9bsK+6+sr[JS9<CMTKi(Ga%;EsMti%ZI<R_3)2qWSWlb!Jdm;=&5iUBnq%li)SiZnto`#ZW7"b<J5LsogrqFZ=[O9D%
%^Y6`,>N=T&A;"NFgtcb/(lV&)L6E;DX8ToM;&:&3C*F)]rd$mA%*%N+[su)W^STiF$nphbB@FuAq=aT.o%Unp)SO6i^NM<uFK&hg
%pZQ8)94G3"!;=n@`F.Q+G6[5gf5sG;SG$ah=*gCOd_EitpEn4Mr0!AO*D#DFq"Oc,Epe$c+J!MUG1`4ShkY<kB]ICF`]oj)G6Yh2
%0-)7&mG5Wse88iI9$4S,m`eG/nnXph$+rirqgXWd-H!Z9A3+fUk49%eS+ii@h6B@hH8.L`*D@eIe$Ee^I^531cK-k^QpFF+WWD>(
%Ir=G=S`+O,1@:U(%_>[==8Zq?]&_N`ED`(%?8Z3k-Snm#M1<N)+S>239U;ZtWlS(U1-11$<SKb*S-+_9D5X5t2u6:<e('C-/(a(1
%9`>5X3<+%*2sAZ4n`5`cJ#f]'!ojS]kgA_AW*`c+TD&S$[eo32YI7)ROi@"O#1VZYMpm2@GeWXa1jC2SPu[b/_#rCGq!]ZF]qA.c
%$2-k@XM(W^rp&$[^X6tHZK6i_%4RRog2I"k4X0QU%ol0OK#j"V`,tH$@+m#<.^$Q$mJ\<,ao?W[rI5@,ccXf9HN!,UoHsX=Q[Y%r
%an>\C-?g3BLs$Zj=e3LK@J&k3k"TJZ^.TQ#HF5\%2b1LDfs<X2iP.\.U<ES6Mf*%`LFIQ>73m9ST^,o4+tpMSfT87gJ[#PJM!WcP
%7E-@;"j,apKP>mH.KYl.3p$tX?,()W$5tu(2.a*]KZN[dH'r3,^T#t@-\%B;"M4GZ1n6TW68'9D+g'd\<bG0$I.-qW%=f;Rl_'.^
%m7dOZJ.Ji,?;lf%aj4b1L&W&#a4+LN%)m=-F><6JF1'5O)q/NaJ$b^FcmVZ$mce-3S+an&Q!\mF9r'O/j0/9NY\3n*_Ys#kqsU*?
%ClNP]5)hhAHEQZ(S`,9:N#uYu1`V^R;XG/VZi&GTlUaP=UONq,%4Bu<Id]a:dS6).&JI8FE5kH(A<Oke'H=dKg"]u0DY*lR;uHM\
%&Q]Y-Au$8cNe[KO8]FJ*qYtb/q!1O\p%OrV"gn5@0KeLN]pR%lUORgjq`i5tX0W;k8(^Y$_jb`4s+K0Hrq)h:ci5UpSfRk$&)cpV
%$T.Zq39^A1;<)uOkL!VN1V@JUDmna,&>a6PYcaJHT/W4iTDt!eR;J&OVY/!&2a>"'e5XV@`:W]acF)+_m12reDe'APdso:=8bk1j
%PH/;=1msQ&Z-tq/bAEjjc*@2n5K9U/A[t%9R!/A>fDNs6.`g3>,OcQCkFEZ>>Q4_7Z@<g]4$Aia\Im.JXVp26Tkt;:r>p4R^"`AG
%=8h"6@T9ZQXC%N,)V[U.9ZDgr'5M?dZ9PJ)RJ(:lH-M0R99L52ST3NNodi^5g.%Xd=]#65kEC1r?"Z.Dnr[TWm[XmR$5P*fG;>[l
%68Z,d8AWjM3jX*]3r&/mZ.I!=<]fc?dmRf#dD_2GMZjSWPKn9!2!I\\[B@^nap)jI#,[N[ct6qgHY9d*a,6W?LbA(q->H%o.3-!V
%k^!tZBB)SXCiV86S]KX/X4e%s%6O/Fp"JS6J4;FP9E6>Eok11W.^B>sY.f3-nj>XT*-&_O22RB0S"<=N7N)=]LW]&(r1'X-%5PZH
%qg@*8cd"Tt?emrGk<Y.Ec]J$-<#fpc]/2.of/C(u&@nWG&XiXTY9!98CL5c\%Ha4V_/M+.dk7H]Zn,lPSajfjkG2I31HBY\h@\p6
%fMGY@o04<jcJ9Sc5&T60m.Z:]4*/8j;!Lic>;Q8hg+\r'4-OPp#SiG:mC"u>=GEM"EGVq?FO>1Zkgb]Q]'0\0k<s8W_Z*%-5=)E3
%ed?S?EfWn^YuZ>BGNZ>,8"F($gq@TmF1l+JhttlD,dh::4@.CU*/sd&fmGh@1R<E>>[=Q$3SO,,Z/*,2%eVTlmn[Sp;jpK4Uq3T+
%3Ur3)0@@!cRJ-KjMRBQLH9I\ZIs5o,CSVnn<N#^SUqOs?*S@X!E`>bjFNSBsXZ-./oV1%R]=DfO>':ri-gK+*a\eU>&mDLn:9bNE
%eJSiiG.?%`7$*YYa`SWLc3EH%`*d59=/._AdmRhs9OrH:*4<AG?&Pe%kp!cPF:i]j?;-B`G@#=n;RdK^4L'iP)iRqX-F:PdjrOU\
%`Dp52M&/)ofpbU>pF__IDC]SCU\@Z^RsC->%@q>7Cte+_TMn\u,V<BN]\LF1!eXf:V4:hT,O^0A;':IQ=oF[V(*u8WJeI1beKX?X
%9X_Pna^k8fcn%Cgq:H-'r-(R*r-V\7C#1A9"c[hK5?.L]=]G,QNl@l5E1M`XSmKu%(SrakqStG5?L?t&>&-1o*V*D`M0RJ=b.Xh3
%]1"h7Dj<\aMF?6W4eld-6lrIN:W$mp6nuZG3)+bman2BX2<(WuhCT;qV9NW55kIchf/ER*.eL:%q69bZ'tb_0FiUg=8P5!)jJa"E
%\rnpH7VDB32VbKOF9G\.\jkN?jST@tO2pj<DjXn&b!r^q,;Zg%C9Uih84I9;Ps!=V7g"S3<B/=ij8KA\m(Zmfr>?L6nXOf1YA,m.
%YV_nr=htdjc;%5mgiq7WAM^hlj8Q-U(#<L%F^?`sKN4#iH!Z%b[@!J.-eGbn>t"d3dCZoV8LciIND,Np5ifElGHXsUgo<.OS*9a,
%B%O'Cm`<p&$h*BXp"EjSLb'K*B"cobL&JpF2d[>9^\aAAME3_h:6#QKZM`uba@YV,``EJPoqQ+hKDDHeeO$"4Cc!_IY03%UnM]'O
%3O0F,CRQ0Nl3QQ+oXp@1[*N7i)r.t6#ASNXm!1X[rjT=`QS`220%\i(C7F]4G0Y$!hc7Rp1bpSirYQedmn1T_)NYi[=nXB"dULH+
%F/sWQIT39Rd$@o=GY/-\>E(33r;h2bf<q)/'ku97G,,G)3n)b^,diA9EdUP!qR@4n?f$)m.4#6PD`l:V'A#+.=_sW8\[;=61Hh3B
%0Y]nhMtmf#]9qKKGn0F<1RFTp`N2k?3G0Y@P%A?_c_ngInWblUQ>Zn+1:r90aJedp"bXbuYf]X59=ft.po:2=2c=->E)MV=bMd_h
%6^d2KcK=3,^=#hNgS=nOg$FU4fcnM]9R$-l<C+(BE\]j:6$BCb\'jD4L;Q31-i$lP1r*okeA2@TF#-4,^M'e(3L9N![c]djcf+Z]
%=I`a#>L?EM<nfC3LR/0-"!$HE`VA/q<f!M-^-%jINEm]&KAa>TF$b7C-q+b2lX-XBA2%#"=6Tn\qQn#[\5SNCY4O<+e/$d2?ARpr
%j:a<Yh7AouQ2]nCYg*mJGCK"q,46;<&,V>Q#3f!+TS)aRroWot)RUt)mr>W/^$t:SrQe.&LQ<OYFZq@k#k%/a1cM;X7]3:7j'+1j
%\!@gOC^rN!g"lGZo<%f5lGgGK:L8`N=*MA@GdT9>kU,[Ks&FA@K]*rtS$d^R:6rT*)f+?r%l`(+cY"3'Qi83JAn,]@el9,)0lNXG
%J%N%l*qo=e#EPL!>P7iFPL<Pp]oP!XdV@ZD9g1_0[sidCL7_M4)l(O#N+P1:?$[.@\S/Ih]8+Y'_ZtrR9^C>XEE(WGh'>'WhS9$e
%V/`_BIt.9mDS+H&)s_/(Y8aOKqIlk9I.*fCn>ph-__AdX5JHSm[#VmB-I(MhnAFO2o5q]lRX>`.MYt!AlAD->)s^9A*6O9Il.P4.
%PA_-2FT5EX]=33h\WZs)gXolD1R:RZkk$K@R-a"Q;Ko/\]j98Q%DT*K2spkDQ^Y+EIk5GQ5'Y]9lsDl&o)?V!e$X)&F,!JCV6/dK
%;`V5S*d*Y1i9lZV_7(5ok4%6V#:n9"0,KV=rVO>`J]3VV(T05b)6^aR]$V@=+,lL,^KPuKN4qCq,fuh7ER:(r\&HeKW\@_%>;'UW
%M/p^jIW?9M^"'s]UCJl]GkH;iA\$\<->u@o%Nfo_D/=*nh`9Iqc6=5SBPi6ZmlX0"-f:6@htK=<qF>bDEkbDipLm/pieM`^/>(t?
%q!AooHI=o[N)p^G^@1H6ip3.:X[erTqs@T\T;EGP`Xgt:(N)RWGXo6P6iOC`UqNopXWMGoPjLDr[slETr/^h8EUX3Ol,f-kA\[p1
%jK\"6nF??Yn)s"T]UB%7l>O-Ll!^Mjo7]KhX$o<*4PiH+I`SbW<jVIiakc7.Sqcd5ph.'Ud/(<&3e$_lf2eg@i,1>7HM9=EF77#Y
%`pRI1:$[%Rn8%(9f2\@.Cka#B^.X',ML1u(^5Ji^c1")1\)$n+pjI5Q1Oc]S4M#abhE668Lk\]S,fsA2@L#U$IuRbmG'>"ACpt1,
%0-t`tXec;R"m5"@[nBNSGCIX_4c.Y5`nJ9,G2qN"r1Z<a!c]5Qkf*<N]qr?p-OJM_`#492:VD*&rf?`M/[,+a,@E];s0:Eu&W]%Z
%?><6@DoMCl'A$Mp]blo\St=4[Qqj$.9<&dicPk\J#j.WLV=V):m=jSeonKr)nB#%Mqe]VJP,CiuZ'Y.<$hqs`2c&JIZ`U'pHJA!@
%ahc"(/"?L>*Z0$PUhb(E-?j*BoAk"/QE55dm5:&&raBdehE2mocZO^6g"+=:;-((Ufie@:-4SE`Gh$"BAb.0_20V6U<T2+qST`=C
%-H@Ao>JB8b$X]1PBE"dAph%%eDFL2qV'jT<i"Us;)U5=0gtld78Ma]+IF#L&/tTgbk##?DI[iW=rg`^Pc/JHrUiCAMi@afnEliEB
%^9p(KmC2Pf,bH$&a/9I3Z*3nkn^>^^;Or`Jis3n?_KU#M<T;U,&'qXQV\*6a4UBa\-]^JWhu@@1Kr9]cGPA\TI(T98]n=YKo]L1)
%S[Frp$Q-lAR(Vq>RqE,lKD,-tZ/DSW:O<U6/m69(33$2-7i,A;O+/0Rb>\0N%)">j:'e]8I]5X0@qfe,G"hbEHREQcMrEj=rf7kb
%lIW--@q5K5At>CgGYe0DkC-?W](k.7^GlMdYM9sUN?G!UBm96a>V]AW++7CD]"9stP*__$hM_3m%I`DqBT)lT28,?Nf8uV2I!hI3
%V[lQ/f%G"NihX[l?l6@e7m6ZgiFGkOq3*uoAoH`tl>\t=lq$hnhPPHlpZU)PQ>E96T;uB/JnX7h`5@O;`BG:6bnDbUH7ai2`!P(9
%08'H=,A5/)!j0H(^4`KBG[<K@*\UF5+C,t0B3eAiqNJ8]r7$#i`I)m#>.o8TIsl4EeE$-9^27OMY.o+8+A)Fo_/%lM[tZ1]L<6W"
%p%n[<`@.g@*QGke9[enr<UE"8dA4o^7(0F/-.=RF@-B?YQd+Y>bJJ=^T6-FbfA'Hs#-Z8tlu<2II(H`GcHGcOR9odn%oYnM3F*td
%VMI$D1p3W)1Pdi&770_Til(()25'1YO,bHeEl+H@j@2RfEmtUqUtjTKb:ftC+1d^(M&95:UEgM65n7.#jfs97[6]G[9($J_L8k/<
%:<qfTZhjA=.?>jGIu>1i=k&*Nd9*8#qI7+<5Ojsl&NSGJ?h-D>_oBOiQfIeZKDknj!QVoi5I/:rXQR]#qo>auX6j+%lS**\s(F:?
%*l,p(nn2-=)i&XoSSSeMIG`]BT)H5RD4BQq7.W@(LHDXlZ?41H%\g@Y`5AO^:0&.&8tYUtp>Qm(oQ'JhGA#t7K8".5oO@8flfH;s
%9m94Sn,:8_\@&rRs)!&bkB=?i')>t%34)e9m1$h6YP`'0MSD?d^%dusebA62h;s8Zc$7oKEC*=G4?@3L+)X6N/f-TG0.o"Q)s*W=
%8U$`hcLi_:IRO7,%GR(Vl*cj<p^kk`/!EK,p:`A6(`XspjeGWO:@N:VaFtY5Iku>[60+cr6,TWOR%+SdEtRuP1E40+_ts#9>).=r
%cBR)UiC/qn>Y?R$ec34rKB$ehEBX?MHJ+6!cj5P"c*nXa+#`$5q`8@kfmE6_,Sd+q6P\b_-h5B+C\qbmZ'7W6!TL()BT/Q2mtWt0
%NSSe3M=!l.-')5'/rM_88Y<rk6R)i^R`"p]1WK\VN"$<?W:kF>cd(tO8^?1q,Q6#d:Wr?BkI6MXChYJKSaUdcOr.g0JPnDP)Z.F3
%-$oLMQg!j#h=W_`h9&\VHgn78oK!A`8IkNfcL,M?I^ujY(k;Rg=l=(d-<u<ABV)n@U-RhbEG,Jd'lh.#k*c8EQMnYh]XQT6%6Z8m
%Md.MJ2r!Y&?g=MTV#B]H_`R7fnHHk[^R'pXa^<58++6nJm`paQgG^'ir5F_lf*^&dO7sQ2?gka"8?RG%r#$n<:[WSOfu;>XDs+bs
%HoBaH:CBO*nLTXuT,sGU0q?qRQqgH7Kr_BeTCN8'hUAkS#QQfsj(rekl$W6<q7ISO1d/,ADK[P>%\LKnZF-#Lk(eTY=+/GWdG!1B
%`q8t_kO"%_b9<jf6OJ@0HXeg4HgUP$`ET7-CTt'moPM6\pibp$lKQarJ?32QPM+d>eYQ6co9Imbl,+U#e&m&ZC[6gnC*YgkgWd[h
%NuRiH,]_2m3_9ftT(6VNFteIa;m\MEhAj`D0rH*o5*JpMokUn\jUJKr:;:^cOYPHs*/J6s08J=n<M[*16OPGoHo#]Rr$Zl3/K_`T
%h.u[Qfs55+L"d<e5P83LcgOEbZnf2bUb3;b1>@!I3*P_L\DLA`HN*&(F'.<5eEQt"I1[AeNqrNWqK;-$[sO_RrKCG)^RF$qN!VR'
%gdaCb^3bosO_qu?SST<0qD?9?2QXYXF,7"nps'0cW9!Huq0q1lbGNC-YgqY-[X7Y;4I.kgT&[elmZR=@&M@U48JN;DdQ^Rg#Br)W
%T>%qpg)^\e2l$*hlA`7`hjcOs%[Ph1RsWJq-I"?oS%9)g1bat4[C/<g4G3sFa%]*+YO>PdT,ue&]ANU:kPiNQ0p/Ot9^aUC?7[W[
%YfgOa!4s$ppWeRNZJ008GP=l`7LdJ@m`i2+*lc7']u,/eIrBejG^jp$2ad&\18!?Zk<!M`L!AhS^68B\_(BU&o<WSiLG??0f7!>`
%piprNi9`&cop-Qaf#QqaX!X0K(G4#gCL8H]^Kf=SrPR]=GAXh9A?GlKnVm'WX05=M#$]97:P.),,T?PWqs1T9r8@abqe;9hM3mYS
%aL8`BQ0uoGpqsG_f:26$()TI,I8"R--C=S\*j,(S0?7p/?$URen0-Yj_YY\qlVJrpI2U(dgV9>`[tZu,Fcb-?I_0[%FhI`aZ8oFC
%2^852G8oQigQO*VijAgUm7t7UfrO.'U9V>Aol=QEH1&9*$Ff\^NTj&Y!=c`i8A=e([uRd:O1%7FkP#?0c$iD0*0;iCm:0XH])*%,
%bHm/tUA4$jMa!j-FPC5h-]d;\MG(7]`n!F#anFAZr8'J`4+iZ]>!q9Gr(_UFnb&]k\T+qLr9e("h8gY.26*-&*rar>J$@aCYIEX(
%3i&,2gtl-rm%8*ikL8mib,cFlb?oY<lUAJYk4GNlQ2Y.)Qh>"/=/2T>ag:072nqPYI5Iu>OOi3U+iXJIGi\&dNVCHu(Ja-hiYNE5
%qHe)OA+fN@1WOR7^CK8XmI@(-\hS7&X5RP=U,aEEQs5.I_agX'Da-(hqk6ZFkIVP4kMKmXf()[bCOPa@]m%DW++H.<]2,.Ve%E@g
%k3VFJ4&B^%JWsJcO*nHi8$1g(.E-qrn]2<]mFg)5cgJ2Z^"f"3q)3.3:T!dl^<O`ZSh+>lkX0^gph=-T8B3[Y(_WW_V<c[Gqr-_R
%o:rY@f!?auqW)j2Z-;!Hhg_)_Ib39]gV#rWTO4?D5.(1Ph[i=`/D1lfC_Hs_(DbJ5\opWid^,R*?-s'/)Lm(AZ2Wh^N[p@J4/,Na
%7h-]Ug%)'9ah)Mm&Zr]n$^DkbL>c0llF43O:hc_C[s,hrh.TJLYLF@=kk1U2m([;a3dc>(Qo'g>/fBDBs"_9hNs0R(]T^lI9**_s
%KDW,q,dKGu=)2lF!1:F42^`T/(cOSWC&9Keedl]"qf*O^2P-Q@dZ'S@E:dV]:!Z"@%!h_I],XJ)?[R1Y&;\QWfB+d?\BC"hg(97K
%1Qaf4JEkck>rc5`R^p#?MHA+?^#j9YrhC%f4.PH#ntW<3DuG7QhlAA>q*SZEl!mNL%Q8[H`nk6=hHJe7e^G#XfnD^RB5`$^qchn2
%nQ1TiDGAkil/)$+#P.3Vh@>=iCWE4IpF3]R)-[oV_CKk"qKo9g$]\YuE&?,U\!D1Z/.i?+X^'EEaX`OpQZm0-G.hX()TI_b\?S56
%0=hX>Z+'\T"VA!;C\.4"p4EgudZ`@^bUQ5`:<`"n_V<%jLgXOR)VeJ$=2(hTec%a['U-CmLE"?jPH@=NCc9='qFZ+n`QJ'PnSU0f
%l`].edB*'Xh4^J=)R4Y2)Z"0WT3%R"NV)H4`3BlTIQtO54=;LqiiO5.oVY,H4F,S*j?-lER$i#WjnL.-I<*@%g[0t6@eTbYKAQ9;
%*-5Z7PX(K&MKn@3-RWL(<F^N(K@]2GiA`b)oB96LiqE+9\l-9P="u<]);1p-^DWX9HL^lV?f.d'e'7'FVk8=F&VAiq=FV9;CV>,+
%IbX3N(E\:%f'_>Ng0"7KN]bbNm?6Wcs6>cqs)^_Bq"VM,2iJ5f._5.ZA%)0kG3e7JJ@PVSo=R]-l6:a;T9=iq(Ls9.p?uf]DOj2c
%mIfS!08'&AYD6<r-9_:W?>k$&;]8qQe<F!08uKp5bjjipdc6>JG)M7j#a;H]aaS06%TiW,m^Eq#&RFes\d,9bkM_omE((a/qs`jf
%R+>m+[.ur>jRp!WMtW48(T44iGeh/Eb'<_)jMc'SguFa[aV?gbZuS^<s)+Mb5!#)L4dYL*Rm1A_kgXJ1qL).gmC*ItiQ$;@ine"o
%?PTIZ2@eRi#F9bjfuD>YRf)A'Qf\FIIiOWr3qm4qDuK@>P=T822'8nAZlT\uFk;sE^2,^Uj_aX6It64Ve/CR91@"0/;Qemmq,kmZ
%A,#)+m(8j:"=<sc:2b'7Xlt7@lPrZK,/eo:p%)L:/"6sU^3qth8%N?p@n$8:n[mW'5F&P-Bn*\#oCh0kD6h]O(Sg,n`Pk+uhL<)T
%!IHP\rK_h^=7$72eTX5pXaEf<Rc.\Ziip5Vg[[qrTJ_'5s*E@DqNrJj"cC%F7=IMNbJVA^S"nN?a/uOtO*;Re1ECK1:Gum.=WbK7
%c-q[/8o&d`H!#"f4TFf847.`gbnOsbk0rn>+[I`5*ZH+S5`?Uu*?Arb<___2rWHlnH&jc;3goOfj7E^LdXg#nk@[i)3^8'G2o\X3
%]kRLKq!(3p^9h5%3qb+V](>CJf!]dpn&;=LhAt![qJG=U'#Q03n\RYF)#iD:NUXp3o>dnU^>>f'.E]@XD7s,q8G\X<8X9iu>MU[Q
%WN17;cgPK7[Q`Tn:(@k-'5l-Ye$"7:*1V38_".MR@dE`8*2V//#1QiS[Kq0.,fq-3FIP;Z#1,$=DRJ#?6<(<fA@piP9"0`%?FNaN
%S?BGX(q##RlM"ADnYCLmSW*EIaWG$gMQtTd]ukCPJ*iJCe`/h)OJi+ufUT.I5\22fpLZ0#QigTY<Si$+]3NM3VC=@!o04SNZQ38V
%l5XWa5C0XP+C'UZ^X71f/"ohnS\t1TSD;Mu;!1I8GKC*8!f*&+h<k?uV;j'c)Fp"KY9EiRO4;3O%'0_BC>3)*``Es!k?"0EfAi&C
%gHAa9_=>;^KYDK@c_d6tY@,nq`[Z=1'sd:8_W>sLJ"=lMP^7](ESg\6osjh^rhX&rCF:%Vl/\d!Q^:eOKbZ)ZUuo]:WKV)BphS&o
%E90qfNNL'Zn"hIiiXP[tqTTJ!%FaH^LJ6Lr]Ta-`3U_4aQ_[kDEg<MG<p".r/$ONBnbMPq;'.0Z8GiFbc<(c@fbjm1;5'"/46Q0?
%.YI_#Q1p_I%]5fgF8%@\<Qbq*obenH5k:cHm9^ia*@BhB*Z!n<is5Dmo-,N`"er&>/[u"op[%)"@!)'V201.i/o@Wtc[k[[SK"Yd
%Gu)HiM#M;CkJI`6mRc\tK2Yt&)X`6GTD!'c$qkH7m^oIsES;MdAt@hq4IpI$/&00OBc_oJf/b_cBRM<-&u9i5#"?T)pImc;lhJfJ
%7I?U-PSsj*?ZHdS+ZhjO%*#]k=?]f-Qu9H(".Ke?[">^]"<DX^[/n#jUJi+TjE#h1F\TekUl2%Qc7Z]+5^7Y2ic?ES1HD`ZNu7#2
%Yauh=KEed:`V9iX%+Hs),+-m0F*BZ)^S+,A#5-T9pCC"P7RuLa@!LeT`#Rss9J[>C6s?12:+9PlO/1_Eqa\/6l,MAcB)JY89;*;l
%\$K<eEn*)7.dZp+-a.LYn>9MXV(04G'WZ]R?of-5Pf)fn$"<HRGn&O%2!\LhcYdFFWbonDe!IEf"*u3!*+!r>ohfpK2>F[%.!8qT
%[<K$Qj[CV6g2$Je=ZDsq;iegVC3fL5e\r>S?>hL-q>S#_mWGBc@9CcIk/?LA91B;NHZp?]_=WqM=Z27F0Am*@VJpG?]JDJ7Sli%L
%>+KG!$F`O`MR1a%B'e<q92(#L5L-GY=j<!Or8Z<O!-aHPqq&\^VgF.7l%)WS`Z.>Z(KS6HpYC"N@d;_N1@FmUBc[/`BX.MrX%rH4
%Pn/B&l\2-"j'44QY*<`UnBr`'%3cuh_C5/pgbKM]BcL*"ps>.O\TbXCHe#5NJE'rP]L5k-'PZF94-JO=Kp"MM<*^uQJbc>n$da83
%a-RB[U$5Z4^6+8U4N!^`L6)cr05]ajYTc$'W6"k&DUG_q9G/O$rAKh-+g&eA+4_(>*mit_IM1._!#Gca5s7gQ;>Zp=V()(/b9;JA
%T$Y@(r62AA8P5'mUD6O\or(S#`)06>.K's6[B=m6W^g2_>mEqao$Z#Go[AaiRt>(^3aj0bDi>lTb`@X7Yk*KNi+M^>&2]_-US!17
%7Mlc,EE3a0W!@pa/#8Gei[e)*VP<MU6!OfH\/n$U%2$VQfFr6VU/'0r+G!%RV4On&IPg]7H5[D'##+>fVcif&a<rJ50n$j4IRp71
%1q>;@;iM([/.+ft#Xgh6K<,gm?Ca-AF,gB8(e"$"`:E5.lDZK?5nbQY,-\#DECa"Tre`j*N[+cA#jFXi*f#7W*>@=/1^]$aSkn[&
%q^b)Q15H6.O4GNblU6t@5SWcF+q.0n'RH'28es?!O^*,q[9'CUO^*c.o27j?SqaWr5F[0E?;QPiZJ*g7K[P)hVZ&ql0]JoI2[^j-
%$]1Mgd>0e3Lo@5-Ll#7?!IU(l&L\t191`h$7,sN_)'^IOd8D_3+\t@TML+K3+YRKh'E19EH&\*n<:S@f\0J<*AV)lMe:G.+Zs_CT
%3_J[dO9IM6#b<6.8f4I`H[IKJqf+0%EE&!=*Kne]OpXmOp8'P%plEVr48bB&0%:DeXE)X.MY@0Q5f2UT>5tbB^%iCHQ&<"BbuQ7G
%.MZ0e@/oE>X!0,e<"bAf!9"Q"QeVgm0p\0%@DrIJd#]BQPE_7J&m6t<%I-;+:hR`4'O_Z9B;@7R)h]Ii&/!l`mRT`45jBR:/efAV
%:(jmVn,ean5eIZ`90sG>;IAG"KN/Co_Ba5,KjJ"[,!W,j@SUEZ54hB87DQc/HCUff'OI>pIOue('p.4ioQ6VO#:TG17ZT^@*-#hZ
%*X_1=&jY*^3j+hBj,Bdp-4l@fo4$M@RtNU-aH2/'=?nf;L!qR[UO&4=Nj0_E'1!QNKZupO.CDeZ!pG=]DX3"b+>uq:kKo,!iBi`#
%89"eY_f<h\+H(M5RW]])Z'E*9C/GO"ZP3oWoGKD0$t'uE8W/B5%aC)d&TpRDON"#g!(^QsN)9Kto[+<].-O#dPjpk*1hCerM]<?)
%#Z3]#OerXeZ3@%E"K@tlO=:Na5\OGV1]jXIU`p#)[!Q=@Z<tpE5n!4\.iu&55$l3%idoX=;DNt0,lSIYO9<]Q$%gl'7KuaUi=]LN
%A@;L^;5]-G*R..2HP(.9VWEj@_$5cVQ\V7&BunjV9gTn"^k<?3KKbNUeFs=KRmQ$/0aWA+Xos(AaBGi@p(Q=A!=-ODM)s%C"=)jT
%nqf@ua%G\iZ3#ad09M>Uk4*gQ6f9a5j9g-o]c:9Uio=tWC.m4h4aCJ,#f0[3#:mDpil)WS>hR)eaUtd%A67,]B,T)g,e,+\H5!ZC
%A8b%a@HZP]6$S6ie!04.+T'=1,82HH#nb9Gr$:2SAL+2\ooMd1#nIYmP+P(,b4>pQRLq(%0k!?V(aikkLjNhZ8Hr;\4lYo11/;lV
%OVhWIDI*Z^%S4-lY=*+Q$n*;B@3KpeI;h,eKa3nef8)W;`-jCs0`m+IMO+OMZ-DrU\IA]-!-]^XSS$r)eB,9)/?d"$j;ir]mK$hu
%Na<P+;M%JH]aXn,'#]IUMR3Km@Z1VV$;*ig6BW(87)Y%@P[FOfL=6m4If[qE<0NP/Zku3.*WSbu;E!Stii9s#F(A[53KeSX8s3GK
%(bQ@+C7)6sJHn!QrZP]=c5J32>\Xkf5Gc*9gH[PmAoUAa-DWX/ioDB$`=OHujRnUFal`r5OK]47"aT#e<H)0k.*IOQ!$scS_DFO=
%6$S4[?mJj-',V7CQ&t5tc47KiT*1Z,Z0r!+MD2/[&k',B>'XQkC)5/Y1K%4'YV.Hl"(^$d04Rs7MNna:0S8dEn2c+S\T?hf6>MYq
%+LRN@&47kV$#uLM@Tj)sPDQ<;/<mk=ri7"l9j([eL*8]B+gPX@(1Il1$m]0s9%A.nMAB6K4`\DBG00$G\IV_se!Q4FIrL*$L"A!6
%''b#"Kf"dF_%9!C=sRQs6p#?P1F9s.ctO+DfI?0C+I1/W3PqU,DaXh`]P`gd#)K*%`If@e0+(dM9t5'F2+u4S4m8*R_^l!3"D(Jc
%WAtQ["<45!L^rqhUumKNa`mGDBqcu/66sN!DZ:E%P[^pd'UB=bO[>+oTdV3s_jlF3N$q6*@gg,i6U_[_)H[]:,U'lHP#5#^&/"FD
%c(0;-Bo"p_J.Y+-f_pW#%\NZf>/HZT#IG".de5Ce5t("-+L.L]M)'o?q'LV<!%-dhB-\$#69A;iKQtn>E<mars&al$aAGW:+W>s&
%;f'It)j:(o+UB,6o8K>pid`kKd7lqn(].IUXtht1n?sXkA>GFq&(2aL/ooVV*DqUW3>a^V+E\5-c&A`eXqr?T3VeXGr(uUmi_-Ej
%0bV<qR"Ud^&B^%:J/k8MH%>:s#B()rWj;-:Md%>*jDIdJ'gPVoG[.!e"7kJCF=C2\5s-%*nbQg[=JVQuBHJoT`QedJ)r#P%>HfTG
%LeL@M-0?H$9^4%LHl*g4Dept4\g_59_NWI3"-@32&lQn@-e8V9Z>.e8">DT(nTlJJXV^m&^ID[H\\bH-K.F2pCJr)K@`adDd)pr>
%GQaX*:io9@112!Fa;V>%P*;5/a<S"l+;HIh1b_L;#Tk6U%fmAAb^Km\8W^T@Hu1hN8:+kQN_Qj1<'G"pj;a!RjQ[>1$u$u_Y>%Qn
%;[bB-.Y]LI&U4M_C5T(r>_\J*0=Gf;o,3If!;DR)Tr'ZA)#+Y\;T-]V2>JuTW=ME/>6sP0ddjc8"pS4hiRbog7RT[s+C'W()\I75
%'MFPtA?\?oV"ot+8;&_V7B92pe&Wds9O0CbE(JY,_;.VW\c`+Lg>pA>>2u!<!cc>!J.SDh+n7SsiB5#FPogGV,5+ble:s)3T9$We
%&lPGQYui$<-it&#K+X*j#C(ek8n_,X+]8Rt$&%KX_'&D!@/"*efGVS:)>maf;aI)S8F&2J=3r(mbR+@R32hKH7:r&jNi]oam?Gh@
%*1tUU@"gV?!=Oac5t#dFa<pE:aX\a2'#lg<GqME>%V[a81;UUL(Jb7A#j(?AT-[HFT:qN::C/O6AGcq+Z`kcS<K^uC8E5o<lG/MD
%'uU,W?#j+sSjAMg'-"dqVL\K<22nd)R9O*rkX5b*WJeUu,Hg+Q<./`)'e1*8!5t/Dbb5b^L1;Ne.*/,K>Y2(2ia!>O(hl2F^EP:a
%PFQSqLF>NJ(ah#bM+!/5"b51bah^R_b9uXL#B;),ZQMa2ad81:So"IW)a4HI"Hj&`TPcdZ'd.+=fSs\MksDV*#>7Bm5pN["%rinh
%Tugm4I/94mO15j#;+s_+H./aO[jd]O&?Ijc..S6,0FEX3rQo0bmc124LqJeqL\2thb=I=[GsrQF%X(734^j/B'3lqP/;0e]o0>WS
%8OGl`'QWbsLl>aKd=$g==FcnXSg1P'.2<77hB5@B"IBN#!),D*8rc$59KX0.6\f[aK4[pkU]TJh#361($SnU?OOcEEV6CtX?&]h+
%ng5J:?7Jm(1#-bn6idTT9pLE`S-h$1LguN!-+C[P=GT^U&6Z@e+-T-Z<%B>o1O1PkM_&?$KZ/rG)m0t0N%AOC@L6G)%7s@C16U^Q
%1%?-,.cdUTgf*?TME-sD?lG%B<j&,$%YA?r'ngN<.9QAN8R6VP0d6d]$E8`L*dEnD".V\A/^#_C4[@pq=uM&[8H&Asgq4&Mh8h22
%K5#_-M+p"ql!(\E@EDVD@o"DHbQf`/.0X=4`<TI^"1Tn]$uQ_%6S&g7#*<jLPtgD&F:IfBR:'BU[$rhf0iTsAfbE9r')9P#o3t"l
%d1esX_AT7>ON1h*m),5;2p/KOs$S3Q.Fo`$Ou*B!kRpH"J[@ecL,Y3'&*$6O'Q_,;,;fdgSe6MVOT<JTQ5Ef@gOgU^%R*B?^5.kK
%ng*,iR4%#Y"2T;=ABeN-$kO':"o+0EpQAC+^WIuLqEIA7MB8(Pe/"H7\@8/PX94no81`e0>9\sTIS*/VMN;9f*fOKF$,kR%+e/$*
%PTcZhk(!FSbrE+!*WfK!N0P#`!]_hXIb9R<19;FQ,5%1t.0o`!4[<TkZ6GK@cpaJ5$NshkM!8R#ECDK(9jjF3<;FnZ7.`=!aW>!Y
%Qs)\Q>PK7/3'"^0_OSEYcNm(fZ,$36]EjfM^<cr)Ni@ib"p"?Z1@4GE]R.f@Ou.riE$3\ebFi@X'V%WgV21ak\-k$8bmkHrCa9`F
%XUPXITgj'`#`e7e_GC%ar'H<,R7s&KKY.I;B_$\Yfom^*M_EjFprMMJTsHfWnOcuKN5oPh0XaeP>mdWpZqTlgNMHg`!@EjU#I6"e
%:fpi9c$Z*H7D^NtLu@>+B>Fo#aQ(-\7@4A]Lq-Feki<!>g__^6X)`76"#S7./X#W,+t?,2!s3V9ag<>u-RFfWNMUn65172&:^@Q,
%mk>(TdR^#5Z;2#h1/5uL8GVcCM]XBBLd7,o5!NOH&f-(aMM5;1",((XU$u2]&eFLWQj,#PdS:-<]!FY[&7dMQ,>QV&T-j\p`"ALW
%N-JJB&gA8CAJCRSN#a,,OiBpT_c%\r3.Hha#=&>&LR]ij&+%UD(p[u:Y#>is*ju\iIKC/)#e-Eq,^'6,$TO5mM.6[!V\7:8+Ljsi
%jK%4C+j@fh(_RBNL*bKMUoBQ5RE8DG*,#%c=P<n4_T5c64[9VBj=S10M0*H1(p""oN'_^IZCst]An_Ip+jVNJ%k(#3Sb;((O>]'(
%Yi*Is=[];-&93PBW$A#Op@JE28T7/OC1N0c2Bk8B.]o5r&r*G&6bajOJj_4_)l\p$[ZCm\6^&^tJ>od;T[j[;5XsB;[hK.g!#u_V
%EMF'Z0Tqj.k1D@]h:P3f"P*3)3UTcDK<^E3<l9e*Y&/i95d<3mf#K=)&[9:]N<BBZKEW-K>fHo\O*qR5*Ae$f'OilU;\CLf/E(!R
%[ZQZp:_?WYC;gr"Hj`[VQtG"?V')<SQIA1YXq3dW8f/5%m!8feJ+ockoHIg/i"LbA&Nu=7+j^=g1-EGi\cCP2,$l+`d]4Op_WNK`
%2Oo4#q[>Qe+]rV!KHNo>&8!Qu]0m8'/n>RBkoih0KB+JB(--B1d6aH-ad<aI*$,78&rVRU#U%69(RtQ%:kkl=Sh1-9,jPG.LmH,t
%1M2u(K>!?i0pW0\6qU&nEs*&"FbGFDpZ,qFTCUi@VYk_&q%.B+ZW)^J`\`4-p]4>)&l3s#pTT&U\pOY6J_E(QX=P%)n34q(734:M
%kn>SOb14ZA/5cZTgJIu!G42Dc^^;V?idEMS-TLQ+,Jo.W+cff!/.dJWni0ODklZIdpJcj"O/+i%#&$a;4#hL-bN(h12O@s9hP-TM
%jG6W`FD-MdKP]VD;IZmeLDUkkaV'N;%%dtJCC*D+0r%>fN'^GpZXgV0)Wq^7`2^@POUX+7kOmaN])N\"9p,0$IrGRWm!MEW^]FlG
%NlhnDG)kYofaquLJ:K)t&"6M8_GiRd4u/eHSKpsJ<1lr$@sUN`%_+5FiXChi5W[aT1X.>:,fLn%J'V7T8?bUh]1b)]%4o#&*0%d1
%%0QBKkUK1</oO<*6'@BS)PK0/b+MpW8e)b$@?1Y"(%sji<3SW&4@ERjUENq-BT[KO=<N"B36I>sV*6,k<WTp-:p`O6&,dio!4smL
%bR:7_JY@?n"b%>0.Nr4=@tu&S)`iI@dKabb)9CJi`0kGFa;)]i9#_G!"bZ3<hUnNUP>!-)b4?bO&R<Sup'1LaN8:<AD?5VhHu*['
%P0)X#o<&:tAD!QLhT&"W)&mP])i(elS@T;hbc()bfG)M>idmi%cjD>bLtKP/=#SWtZEWCGJ>P.F$:I34YWf<QX:kmV.U-TZ@aq\+
%>RP'F9'A(.IOOrc"1\=Z@e`?/r<GN)G9aRK':UPW!o>Ol),d\*(.s_;:=u96A%BVu+V[6NR@D.?H\*dX$j1G,pn$b2Q:1:(j[HJ3
%/36+.-*QB^_6H>,h<qK3fis:b#\a#9P06^#n\GrC+AQYX&e"GaI#o8k2M25CB./Z\SH9[S/rP610>JLel\#)2X-nWG-m;tH'6a,4
%pIE/]a"T*.'nHEFY5cAQM/Iu0ONbbB%X&]m\<!^mjNA_i,d,5L#+XO[gI<d[]Tj8<?099gcKcZ/6X?Dt!9/m<b7$H]8:l*5WR.,*
%K]@pq:1YU=_.c[IJ[iS*Z*D_B80,>/fNUpU2ao8<XH8g)e=)KI.V*c9aM^lk`g84DJ335<LJZ@MJm^Bu9'aWrG(Il7VI[P8gu0G%
%,"'HR[M_pU_WK%^m1pCEZF%IL6H5(q!E"J<5rr6pTi<W8X2k+)C_8ZHNY+kAEGcgP-To0u<#Je9_Mg1h`_nAndWNB9BTI!nX8qE*
%SAHEe%-=p/<.u/^.hjLsmCq?^*_H_cG8R;1n2jk]GQLE++`j[#:P;M7Nqc5"&?j$b+\*F_qimnuH!^`m7=d4tBd,p3&3_+&SXbZ>
%7SiEW5Zi<DL)U9d+kB8a5YId+;mnS%r3@`4>I!*u_.e=)k'rZ'L*;;,c6:=L6`=U8V=hD<;9nrENo^eS\0bUdKZcgs]at6Ue9snp
%<moVA(W]rn+9$KKk`_4hF(!0L`lB\S8rSk>'jUKi?m&E;+RG50!Y%"$QoO=ehW6N;?lsc8%._=S16VaemZRM3Q$"8[L@2lZUbgY.
%;(E_g3<Eo(*tj7,8?<OoQ5gmsS4j^2d(&T366ooc`>V9S"tg%+M'P]JoW8>7J)ouc,]R<)()Lj5p,PKF[Y]Z!,aLCBLs*o@6EZZ0
%-@Y!V@t8tRPUCLs$QI,Q82lQ]k"rV5*.kuB5ZX>+CtKk(#EUA(A_rq>JeSl/Dipc'N]a-;*$b-4`+>f.-[=-OV%YbD^<GAp0<EUg
%>bHl516`!o<5`h'$(?RlR*SFOaYlu8k6a6o2\Im.'>G_MlD=<(&PP>/KYSr$*[5q29cRht-)nq&0(tZ!M(*$=pCeK)&6S9]U^>UY
%<QiCZdL<dGHr2"tO&RJ7,n$fX2p>skBG/rL9ER]VaR9B`Yjd!!M^S1pO8WqRQ:-mDYTI[aOLkY7g&)sP@7?M#JINe-YtJKc<DEJT
%nnMsO.k8,K<mU`RX1A7R/be/)jSmnVgjcqnqet&)s6U0]^K&$sU[%6(g?ko_m2OSms.-1W^K7c?G:L%>:p9g^=0;Gh[ssf<D>gIB
%C09LdArBnsNNF&1OI\KVnf>fFErM/]l#$!`UuaJIg`KuooB/'Fl)`m*YF:?k?bNoE6]^PoVK]f14S>01iZDR)7_an^VOUi>jSrd3
%3W7_0m9d+FcV@E0BA+9upb^IBb-_JE!h=()B:R`Z:@i27J&A$UZKVf/2-o_O<+11f_:WcZ9\pnAn0ig=a5eC^XD6nt;?_I]X1B?]
%Gb6c/-sXtoPdiIoJ[^;O*8W6(1CV(H#Sol:!5$"CP6>&+<^MkB!I+tFNOq$,T^/o%ksbcFYr'ZIUq9J0k@`<+!e,ei!Yp_=n#'Qb
%&Z9r]<.cAITg1_/%MBS!3=q(J;Rolf!9*o%s(FG;s"H^cNZCh]=LBAtK/B<>`YdEioQOq)%FQYm:))-1H0O#Y$:ep"@fm8572fB4
%:kTb/KJbFYF7/dih%5:I!CftXl>C'a"5JkW91)[1,=!%L#kqA3F`^+``/\J]&h2Rt7CtN<3G7u99b]gWHNk^F;"G)FBcs#+X<s+N
%Oo%"tj]7o%0gHmHfRC%f*\!=.R/W,dT^<DW0%rcKO79Gk7g@t3B7Z#*l,OoPR$jBr=`-2$8LE7.bSSq:NqbFb1]_*<g)-Jj+hWgT
%i>N8if!!bEi_2)8)G>SCCg0TI)kmVm#j)UoK^-R+2^;Ie7`TU\:bKsbbndiq_-@Ys7,1=Fr-59Y!&4J#(_dHPYKVP'l^eu%RW7\*
%3oYfPmss`o1k[Xj1$TAr[i#X-9V1[nI!8)e5`M#ma<4fXT:@j?d3o88]X9-Fc]&JQ_%p,amrJm17J-lnn`hn.@6gcbB67*3IYOt)
%:Y#[?=9d3=ksbU<1^d-$lZT'Ic=duh1!q"EZqGI=F,mNG+nO-]P[oH/gku2Bdu^1&^N^a2>"C2e7T]"0.UXC4?eZ=7`6?_O2#0j_
%%]>IK<<HccRA#&cmZJk/f[.pn+Ao/N%,`)a4&6T=`e>c%]7ZLTRL+4r:[B@uPYh!<*>!<<C-@!e&a2n1?W)S/S5.&n#\4M5G>C-`
%au#:bU6[UtNE=pFp),W?kclst;9/[;gW5RHEB;MZG<?7t8?$J@b(Wut\\c&]W^DN'/0AMaULB[HiBY;5FQp!On)s1r+gTnB4<C2f
%aHQ:+4GF((>)pOP"k!s_0'!gm"9m1$kf4-i`Hg\3Ke`ccE?aP#bsC:iAW-q[;;i1uho!#p^jq*6\F##D_QYM%1_&CKI<HkmaNmg7
%]BRCfkg:B36:c9/&MD@%cIYRo"=(ruX.2!(aAW0Pie,#l?,FeOGHDod(4\]UoFZ3Nd'BadbSV7mUI"$9dk$>X2GH.,]/,TO).ZDg
%)VP%)e/XUaAY&6T_UUh6r#g.i1_Ane+d6(hE<cn',VW5K%a^DGP3E<"`,Wk(W=]Sm[iQ/rChtnjYTV,3AKf?T(8qho>rftBkG[MQ
%&J)BNPUm2TKE?;Y8V5;LZRP0-\PET)&u/;E@&.eh*@38[H6i:qO+\ra;#cJ0pkV'sh1:8>iu"FT7s1TSFm#O^-t53BZarJ-D[f)Q
%S^T7E,F%4mLdPqcoPh#7ffS"iXHuY@(HZC_+utV28>f<eNYs#c#C0]RNeWNPTq#n1+`*]jh&SSjE?=,4Bn:Rg,*^U.o.:MBOU>;R
%(siDP5_1:6+Y&nS,<>GI$2-2D`Im;m*ANupS?NX(8:9<GnIZBN<n!$/3$W.)5t6'n:sI<T:/E?E'J'$!NEn$Q`rH9$`+&EB1)[>V
%O@7fO,TA=3=[GC+bs_Ph93hZ-84$<p@^D:iOg6uY5=N@LA\SS44D4R+Ref*1`,aio;-"9="lMcRiZMrdH7l3B1YVt&'VRM"b-#Y.
%XU5mDLA!^tO0b=0=tHn`"7_?=@=bAmb]je,VGOf+`/^T9>ueD\3n-!E<UGn8`B`4p/5YA;]!?PsB-q9hm]ofRDdLg97'/28%iW>O
%B/UU!]^!g=-bWt=W0"CGCs_$Ga9FM`_Ko)NCOc7_b,1,.WG=-$]CXdlp2Sq:d0]9W`*4"5_?\/>C<VHQ5sutA+E8VB)!6/t%d8(p
%ZHjYZgSar$,`ZC\$De$H7ob0V1"OFN?S#04+sRcO<4^W4ggZ+P11YEVd1':_fi/O9b.f+ne.*LBd9%T9jN`sj7)B6B0SSis`5a3t
%Pi50a]qQ/Be"OJeEX1=M<Mc9J(n^n88X55jg87^iGBuqA"q[1@>71farCo4;B.*=R)SitD$6dm>TWGaScAS9_aV-)hCcaI+OBjG-
%W_1$GWfTm[aF^0c#,#'!8J$pt9o*,GKGI<IL8M``_]p1No7dT6IQPNoI.Jmi]=`kCG@<9AHfUJM;lKjPOBR"lAh/8q`G*PLAk"s^
%YP9O?I$eD+gC6l.CUHVe>JkS<R7s^LR+,3Y00EVBhPu^<I"k#SI)D'MA5T<^'O_3B-ZqeAI7\_AR;8dBb[/F(O.72pc.h@oc)&'i
%.C!)Lr*GL+[OL98P.<%U>te=d'&"('n!Tr1n0-9G%/]L`CV[3!V'f,'.sWb#cY)noUa"de++*EZ/,L;"j7'Bn-sQ+Kj8p2dfrkE#
%[qtjtmp:uaE@&5fH0t(DCfV<BgGgr"'N=e(<Uo$Fl,cT=/c'm@YH[)&Q$fj"YBGUeB>)$B?Wc8LQ9<Bc#?l4HB<M2"rH5-GFFr=(
%5-5ORjXrf86U+C#O2s18cr$'*/ssB.n<_eWZ<^K['m0N0QbK&/>_K_K;'D-Z@T*GQ9f9@crN,?=(jN2<dZQrFTe'M1#$(#gZ3[[#
%U"UR8c14]c&Bi-DIGHSWfoK7;o>h7!EJB-H]2HoCn,lZ/m751\B2I_^W`q&-Duq=_%UtUBfiheE)7=C6WFA2J>o(O<PqZt$]<WQ*
%-;4hc:qfK77+2*:7?o*cBjr2dq$I?kpe,WH4Hs!"Oj*8b?*&';>2fp:l6@,-lU4>hOcKSZA/5DHW>0[o>LkRf%4?+qFa=J-KsdY=
%0>g@1fs,E/.h:-E2[cjX3<PJE44B$]m$X!+llRU(h!CZ$V!b$D#H7opq"a"2a<VjEG-[LKX@Ne$j:;Xo`Cgi*3^6ci?<3j]96nm3
%QF*#ISS=uImnU,\P31OM`J<RBdnt#[eEjIVp0l-KRcRi$ii_M,)lI:d[ClB?[7OTZbH9FcXk4Cie01,YL,Tbmc?4XmCP'#:E<kQ8
%ETnRR"aGYJ<iPO!.Yj/89nYi?G@A2n'6RJ$+,o:^FZ1aUp>h/X^T4J?FhX>2(0THbGtrCoAf&_YAr^mshTaP3CN_X8414L*VV)N%
%R]0";eW9[om$q7PN_W84AeW`(kO-m["T]/bgC,ss.6j3A<A(nmr*UY4*5<gIW]@CS&SA.=''16H*0&l%Ofp<d!@<-m9^eg3I$T@9
%8Z7T!L8[g/RJjA74PPX(8)VB.Rg4E<#7M9a2H)J/#\5oj^^%QPMdMn:d@,CjYR-A/C]t5B#/Um2qh_>@R[UF'HOI/]lr/_>=HO^F
%_^DiOMl:*G!Yc(WjldDJU*e1GZ^4Es",&`WX5pV0iWQoQW*t?<TY>I^5bp0j\qqKUFAfuLRmS`iq(^Wdcc!2#amXJqTVIt.=m/UQ
%o27Cr7?=:,;Y_m[L_Cl]PMuj*QDO&-1CYa3V&MCE`4P+ZkmKKXTKCU6:)1\s]53r[<;.T7.gtkV03DV\p98@7)VHnB>\0lH1X-X!
%VPD#pXIZf9GcKD8<#)+mS5hu^a9'JGp2'l*%+"UJLNC?1;C[N%#XSiYP@*%IJraFsL>5*bE\0"dP:uSGjZo[aUf9-J0#4EcdO81;
%>ZL3c.RM98,NZe*EqN#'5,D5qU)15!GKH[jF:Mm&"mSDa7Boaqa=%9M2'o*1PH+25W[a'M--2>T,J'nN>^'(GSl2_#.Fkt.'Z8.*
%RZofI,6o\&.$ltCr\fc3>d$o/k+=:P/6!Ns<.8!u6&N&hUE%W[8<h:_8ehsRAJF6(Meadt9\DnLXJ;fh,?Gm`.NKtgQ5#6Qb2k&e
%<@l;'X<OPCOb.++Cks[\*5'oHO9pJ'`;fqndm?E(CK#eWJZqg/[9)_c\q&7ON.SLja;@\ui7[.eS-h1a;"$\;TtUrXT\3G$pot`C
%6b7;1SA9-5iNTE<Onp\P@?L]MKmcN>9?6-b6)n9MOJ`aV`(i6t+"5;OHtCb-iGd\KV]ku*SqUmUk)#jD@4b7Z2hnD9'0ck9H4Y\G
%BfDS&.)L%b@t[!_['+tq!IS0Lk3I+):?K-egdJ,L*1>D"^&nf5`f`a?r'^I/,*)D#I*?dEW-s\$D%f_!=5AZ-l5@(a!lJ!'5j2Ok
%81,0>>sP2KH]*l#UsZU+'PCuu\Tt>j!=MkhPaCKP==&3pEKn#G8Gm4pb`a^0AG:G8"0*USN[a!o,dHoHCj-d!V@$&MY+#SU:bs+p
%L`-d7=s+XIfT%eoAb:71M3MjfcrSs:kGG1l1_[XH:_?6:D6lN#/2^(>\$7A=e&J+abVmTE<H208,-G0W<ieM9<i95+_Ib=SMR@Dg
%"`pNO\oR1D<Jd;J#_d+hSo:@H.@m#(<j%/1c]M0'knJph8k?!t0rmo)b@R62f7#aaU?*TIW`mk\6#&j1C8n?N,k=;OJm`!DA6:W&
%i+eoB=QRc0S*i`(>bDe4"U7T\X'QuGmNoqs:b(2^Hna^&$Wq3`7Rg=@T3%"Fj,L'b:lPS=HQ[o8,RP;$aqUM0f:HqH,7B5'8Er;>
%iA.2oW^`nSVi/bm56`<r=gXhYPPeiN8n58NAipO]#?@&(dk'%.Jb.6r+t:-EC,4n5ZN&lW'mBkTP6*nKk>Y1,;V@RHK45kX-jMTj
%HKC=(MQ41DijjpJ];t8e9Y"K/Up%)pYG+:d>XV[kCH/BK=&?M^1-Zp+RGEC("NjHUlSB_h$rUu5lN'e\nCI[%AHg@#K?Dgn7_;lt
%9E8Qq6"O]^'=M2gn&g(:ba34![nOo6TBsFBfAigS!X0"/@^+ZZ,`>3;jV`B0;-$E8$qr%f3@S_/'8UVVN2%2W'9T<[9=(I4N;"gs
%\uIUe]N.&3R`^a#[&',.ilj`sA"aaFU0.!/RS$e1R4HN5<Gn*p43PU8'fD_l.NTQi5eNP;T@2FKjm<N<QK0*U#%UW8n8"BC9&k=f
%>`<C.dL`71jQ;>67`pY>ZL,e$@MS`"+H@dc2]Bpri]NZ!au313X)?]q=dPgubsk]fEi6R@l0_dl9djq&(/#4h"/VI+;%@9^"\[s>
%jat<h9jtTtnET"$;o;_=Ei^[B/6>I[lRAll0$CYjQ1^WC1/G;AjW3BD>:&Oq]E5V\WSDebG"6=[$d:_iUEBriYrHKKGQ>@VX<EP:
%b)P%cWQL4QXpd^ZfTjX`J>(cC[U&-'lgd4tO/NYsc-2,?=2d08o2BmbL8g<o\pq,)V/rgmbVhf1_VLd4L&6,4&Z673mb%`U78[:"
%dU<1tFlSbI*.d\(KL]%5lG<$](e,9O:H@L^5a79DPYN9a:*s4lGeoti.%Pme4=F&f9i4#i;*'dnX"%c?,+j5d\fsYD%XsWERKE(Y
%8U\.f]Ng.sY#E*HSD@/XQRh)Hb3-r*p>n@5MIQN^7=Vl5^ZodRXB^]s9D6TTV93&0:9on#5^BZBF<%`:ZF&olC#OI)eRr"/;:kAY
%fSVJkV1Z2;_m`WYFELhnFZN46nEssB%TBC$"M_;nVHA7Z$hA7n<YX\c.@:IKrP6-56o?J[SVI!C,5Hs3b#QHdhLkQ=c5%@2TXC[J
%@1=?Fl-POLqnoB^:[Y-[GB+Tm=5M[Xc\Ip#SoXgI7hu`;GhW8pl=`.CGT.-H!il5ZO1#rYP,/\g$u2$)bpU0W?.;C`86<Oe#^a=p
%Od`9-hK"9G[R)'!KD-5I7F!!%.qVOfP&sZL=E@7:[,!,8;Wlr[8+nE-^_MpP'p$aJIF?E2lcUC&]Aupuq=%beJ7.UUTamESFVBdX
%.i:BC_Esf\><BjVVtd\;Y6=%.^+;g+!2`L4"B\V=jVa_pfHjVaBBo>rBZ`+^)>dZ9SZK0HGUjJ*/ufEt'Ie-8e*8@t$b<fG+]Ruj
%;r+Q7=UGJM;7Uf*aT5F"c6qm6&o#(E$^Zo_D$%Ehd?IXUEWZrX$dqe/"\-WBJK:%j\gWf_1K+!:g6$r7'Ds=Uh*ed!$TeDK(7\]s
%"Vpr1G0Z5NkVA3ulC?b&$BX%2_g=gLg]YA`HCkD>coO<*ERW.W37]]rOTpi&cCH6u'nJ[MbQ6R6ja"DZqAc#l!AB(\@ZASEkR%m8
%h'+@K[Kuhd1fI!jPdRmk-Gk2OKe?!&c#hp%l,l9`Lq3?t0<lQk/<>k1ar,5]=(=h3(TNe2Hq5$OKR.VqOrBK6M_WI-&RtHl8jq(g
%<bt>P$?tl7)^."EOY08Qoe2mf2o,-KVtM_p&@i.pKF=lU8F?;/ng2&5Kd]kG?Nau1WIcPINW-*$il;H]<]eDiq4QB.#\D[_&UA43
%"`IJ`)BkgJ4S_T;efk;m%H5@g>YHA8J4S2pQ:RaK>)9#Fn1"q')ATnTO(3RMEF-D/`WBRu1<qhs;IJu4H5S*2mLgIOj&CZTJ!`^1
%E_L=?#,90(b3B!2N&_,N3mu(bOlt+K9"'kMMs@0!\)MRthMC?3D=u%/P\o+6B,"Rl$F2paGL\[gd-_WA2PSh3Ra3q3+S#]tfQ0Ni
%R/T*Fb@`l?&7PK`$hR@H*4d*c7jdNO3;Ru'DU1sT9I#1ml)$;<r.]C/[XV7?+m'J,Q-:@]1/k+"&6T.E*2WSeU6,i5mkuZ0ql&L#
%6KND#Q/>&QjXZ8URuN;D5H9*&;Ya$Zj``:V]TPi6O@m'X>QRKhFB)9l*Mje<JEFdemQb[/_:FM8Y8(\\Y<5Em:Y_72j]3GZbocC+
%TDkrP,cohSd]PqiB.hZsb/5tlc6C[#@D#WC>/\@YU!S'H(aW5%U[lkpdh/PCfKKbc=%P<Bj'8I5YHl7oeWfWAd[=(F%$tcdNLoC7
%J8dG+#<oS,]@"ZhltF8ul7>i1R@T9&W%^/!F@2Q`]:J'409/\PAaN>ph,'r2/JT0`,G7qmZ`O!KhT.j"LM_1/P`'2J\Ei/7`A;kr
%6`s45MQ[(sF$`Y=2fSG2Re'&=4K!LMLYT?U9-El)Y>XE5^Xn/!CH,diP[&C)4>Ng;W1?Z=Ob'=ZfK2>EjgM3h8\#j=6eLTpZqM]+
%)r4A*ITMgX(A#7oa?<VC<*f)p_3-)VcL$5E:N0=qJkDm2\bqHQF]Kl9gimkOT<EZc,^nBaI2CeEIXPc#n%@T,f5J-oJ(tiF%f>jC
%Ilb4#4"a7nS%n)`^#LkCBaOUC#(F?@fu.+9E@D64@)XX^nS7\Ip<ng/J+:dM>V?o8f7jM2ZUTO*cJof_%8/gkCFAmrI%%U-87"YU
%%.!tV;,1liaMU*0EC2dDGZqGkBaC:D]N6#_bnBhEFnC>[>oWhs4B.Z1)d'*^UECC,KK"]'B@l7S;T'j$jAl$JA0UJ:*ruY..Z,c2
%V@Y'_nVUqkH<_]uJ-UmsR\LQFoD)Da!:oHp"g7etq)KU:>Qf^e`L_]Mnq%hdL>o1_djI.`6=u6":&'l,c^.KkA&4X7+HDP$0Q?..
%($2jR\?Z`/k^:(<kK1nD1$ntE1H#en&2.GRpOqjEGS;b5BH2ThD@HSH9Fb]#UqgsP*4fQ3_kCD!aGTbD3fOY0han+5j'p<LJap^I
%\FU[bV"."!5i2$g!#kG1%8lJ_3j9V2j-q7_,ek]EQZr:/S@Q<LEKI[n]RV>BiR[<#Ds'mk-0q)P"d6CX%MtBI+GPM!Ji>M*@'";>
%&odV5i<!st,NCj8$nt?8/SmL$/<k)=2k=Tq]GfV!TE1MlXr=_N(iCou/M-EJ^@"kmCqcst\K;,5=RN[Q3>L#HR;J?iRnQEbA;p'T
%C>@ddDa)3WVap<`;gJ&5#4>#)^CVAi(GOHLcQ>3o1+'.Y$<TV8rl*-`\Gsl5j,7)-$/peRi_\IJ$4,POYpj\QM`bs*'jb"e]G&Y&
%8="PI+.&nbE]o(5)=FSh..HQFeb?5bSDq<%2Gm'TKAld\p3U1663jGo$ASU0PJOYoJNB66+C0h4Pd6hFAmD7+8P.$C.?=SI8I'O]
%K`_bEh%gEUpd4%lDp^&<etu<2Bp=uV.qQg]a6?1UFq<AG#%E=gI>E`!+V1Ne(P_!NScZJQ07t_d8qp8i`GH?K9hlo,JK/&KDZg&.
%hLgC?Ig"kkRn[kp'&*^ghVT3W;jCLQ_M!!!k_tSdBOI85"e[O;0>o"*Y?s'gZ0R#-&/$k%=[##AS@Ya@j.^NRJJd"J>(Bd(IS@XA
%H!tNJHOV,cLApup;Q:Kk7H+29cGJO&&b[XGK/%7jn9NuE<1rDB?BU!%MRXiF`54CaZ'(^fQR@@hLg4?j=j1hVG`;MkE:XLmnW<3<
%+TrE2Z4K\6=#&]p#,`=u;>@GHgcjdaE9W:>XW/J/R0KsbQR)r*pi9;laERB1I"BYq$<p5@6]iB'JnGtl-+bkY&.o-[aWmup3H55@
%Xg\V]&bfl>+1m%_3q&p@AO[5c3rtjPE.7V+nPn@I(uksE]VZd!o1T*LksX@l_;#g2%ZV3J*>UmXDF[(_oQ7rGqU!a-6,"O86b7=2
%K1JRcC8OrUpPt0YEY'miYQ&fs\2Dp*f@?q)[#^ELWr^kJ;>5DuPLMVtV/!7_YJ/pF%ipJ)CY`N0#Z'AR@-98Qr*8;n`S\1C4(;6%
%eHu5pR52aq%,5c0_B\3(V.B`_9UU<7TI6ph`@<0bge@js$R23Io'pDdGY25berj>1*K*].be`IE]%qbOQ^(8)4Y'@G`"/,%`-iYV
%:c+9eF^_3&!$T2J]&BIF2FYFupI=Yiec"k>U>4ok&T0BgiuQ44GX)?RV`U.[UKX$]_biXGqi\t20K%rp]urok(Xh"5/$JQ*psLk;
%3-$5Uq[uHFqmcJl_fd":0'L03V`W21<A8l)P/nn"OV`%-GUZCV#N5l2H*5Z6e<P4XnC@.joum/S-tK7r5+jA=8s+SC"?^0HKZ-B(
%n35fuUK.^M-#%)p>r`oc<br,CE'fCe*:k:2kkpBp@qu5J?_*/Ge^]k2)@4J6;Ros2a=p(@5$K'fhpk]V6O^k:2j..]iAE0L7uT2O
%cq*"V_^!'3`@8Q(7X0k51>]OoR-DS&Q0e`!As1H!,)-pQ`e;D"o9"GRij?Jb(:V-%:reU@9,#>]6+qNYhL&A1lT0r^lfW5r</t%-
%\c4[ki5ZkUl!S@K4lf<pHAtB(bafAe6+GLY$DsF9<qKH5%[JHbO![/1a#Fq@6]m#[qFq3G.*:PHb^9qD(bn:e;R(>)6)@!*,/j5h
%i%SSsRher"Zb.d4!(+4$C&u&]:M\")#q:P9?ap/7l4!+&lY4o-&joH$(2`5bj<?2_1D<agIO^YMl=_#q0B@9BY&s4$;LXjcOd3s=
%:%#>m'i/(6"j=#QIVIl[EL[?",*"IT^l@,U6`Y,6b\e)^7pQ]%DTlDo"os"Z!:]C-I*iu<d?fkl=7HF.G0$"/;$)h5X7I@(p+(3u
%H6SKT2Y)5_Z@jNTr+A$mln['*6$cd@,UQmn@$+@m">'Cak!eQWEu`L<Aq[Ke\:2d^$:m!ob.o_=)Whq<rG34m2%$ki30cFsBqo'$
%N_qJaD%naj)`'s7S-I4X`[GAfi-1+]p'Tg3E[4K(=c';ONZ?5Nd57"mZ$A$'2iAQKJEs:m_E"BAgJhUqNDW5d=1f=gUL:et7R=ps
%UL7J,9m5e`7NkdR2-2L7]nh:YV7eSaV.QMId^+%tJu4:'_(qFG1=(NKa?,i^628gQgE^*r.'YbsotppVB?)VAQt$p@]/Xu-aHCg;
%*V1n^@fo11%%Ja,Ugd-a\13k%q&&O(P#T==p9ZNmT!@ue21#BI00Q`0)%05pe!`FN!ad"M\Lcl)<hmHA:X"T8Nt-NV85/Tna6#Z`
%?/MX6'*(d.\a7FVc/E[K`L`L/Zqds*q<kJbL1ueZ/')%!'jU'^7$qIK%4k"P<?tQJF*)l1^VXr=-MLuc,EW>X29[?b:=P%j<!h%"
%1(:@9bpl!hU8Ufm]V$1?*Z\9h=$Rg%R#&U!XYe8h3Y(6TdQ(DTn#FmA(buFg=Z[Q&,`*VRc3E9I_,FC["ou06?2GQ&]5fdQG?j\h
%,X!siqSSMX#ior4k<]dO^ml<oHP3>T3(B$r%q2H8S>m\3?TF.iBYtN[7G+SN'2*4\VOnKX-XTT'>9O$'"UPWU_W:JMk$%H]Aql$s
%3:lgG3!12;@7BkjOqk$u=q(JRG+nK!#*oo#r('U`_@hhRkSHce7nSmU;S8<Q1t5Wk3DQA416RbnH5MK-*?T;gY,E/)_=;DPg_Z!Q
%&\R]HDAk<'.f7Ss*>aG4#h"j@cakeE(IkZ\!>$]@;K3@J,IeH8a6frp-dSSYM52/5=su$U"Y8ZJ#<;Spl\?aE>T-Clnd[39(0U@T
%U(cL[AKF"r9WH=uWK'qeP)OB')u8.8dKCsq8L6;((aYM_O=-WO\\uC^W`X)(GWAm)6<"+ubh+G-]7'I7PS4m*Vs5sG_=j@#_Mad-
%4AW_$OWW#%9Vr92;T:SQp%XOLM`lJj6$3VQ*YP-$O&]psduFli9UqS$kinFI<8f!@mOEkq.oSWP@1fE'f\>#,!!"IG6ERR*@fm]p
%qeD/n!3Xj/H43s$,dX0nT#*Xd6,?g$=qfS)o3`KtSJ;.1+H1C%Vd(Wd:kU&0-PCq#ft&X;k1Y:ePD5:59OjP$i,O/oh:hc^EdUB[
%[a@?IjV=RdcuX;OJu46;[5>_DK:8U5CJB"sI(_KD8\K.j(?W4ds.pHS<>*'L)<siir$/aG1,!+s!!@;43:j5+%4h;0WSkQ+)k]q1
%L\$a@R=$@a_Pok=8h;O0HeksCiK>rho;#?"`Y`kJ8u3D'M9AS(Xpb_?"N*(,^.Ju%QX8<0<,rpcl^Mn7<e[nR$rcsuT9D.+AC4i)
%ZPBi=YXK;hgb'%VW?;7fZ76+.`^%??d*fq*"Ngam0;#ZQN&QBr-NO2P8_TH6!9HjUJ5'6MQqCT8IT>+=%W9`2(.4@qY]EVY"?TJM
%[Rc'`7@Rm[6nEQ$SL$r(K(XNF,!j!ennF!b4&'EQD.-f^>83FDi<nXjQ+NmA(:I;6[]hHTUG.bk6%#TAL2jpgEmb^c23C[=0W>[4
%D#lm=S$[nJWm__%@ac)2U='gc99lrij4^ko78B[2/Ga,D7I!hhV*pDZ%&L.=pg1jC-ASdsU]jkhcf$2J:68"mbV5Ro$GnR$b+KK8
%Dh:L]?[8!B,^?Z-YM<s,k_GCT"UKCL6p8IBS2g8b-08H$`9NYH4*W/L.d0F,%#P6eRF:$a(LWbS,V^kX]joZ-PXsg))sSQ1QKM@p
%,g.6>2VlBn-r5pKTO8Ts<%4E#3=2Ag1O:PFEYQ79n79r[JY534l&a@J80*5'nh#f*9r%l9g?]FT]L.;>S:X6G]e4FOHkNho_-RX+
%k'[:OC4S4Se"m(NBDPA^<[,X\jZZ=[p"R/=SWj&hZniPnp?cDAq7U/$N5q--BAPkNT5#b&rbOcdp1q"`aWH&k+nNL_HX",Lhu<<K
%!KH-$!!~>
%AI9_PrivateDataEnd
